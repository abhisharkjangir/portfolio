/***/

// 20.2.2.9 Math.cbrt(x)

// B.2.3.4 String.prototype.blink()

/** @license React v0.19.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// https://github.com/tc39/proposal-object-values-entries

// 20.1.2.2 Number.isFinite(number)

// EXTERNAL MODULE: ./node_modules/react/index.js

/*#__PURE__*/

// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/batch.js

// Default to a dummy "batch" implementation that just runs the callback

// Allow injecting another batching function later

// CONCATENATED MODULE: ./node_modules/react-redux/es/components/Provider.js

/* harmony default export */

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js

// We want to capture the wrapper props and child props we used for later comparisons

// If the render was from a store update, clear out that reference and cascade the subscriber update

// If we're not subscribed to the store, nothing to do here

// Capture values for checking if and when this component unmounts

// Actually run the selector with the most recent store state and wrapper props

// to determine what the child props should be

// If the child props haven't changed, nothing to do here - cascade the subscription update

// Save references to the new child props.  Note that we track the "child props from store update"

// as a ref instead of a useState/useReducer because we need a way to determine if that value has

// been processed.  If this went into useState/useReducer, we couldn't clear out the value without

// forcing another re-render, which we don't want.

// If the child props _did_ change (or we caught an error), this wrapper component needs to re-render

// Actually subscribe to the nearest connected ancestor (or store)

// Pull data from the store after first render in case the store has

// changed since we began.

// It's possible that we caught an error due to a bad mapState function, but the

// parent re-rendered without this component and we're about to unmount.

// This shouldn't happen as long as we do top-down subscriptions correctly, but

// if we ever do those wrong, this throw will surface the error in our tests.

// In that case, throw the error from here so it doesn't get lost.

/*
  selectorFactory is a func that is responsible for returning the selector function used to
  compute new props from state, props, and dispatch. For example:
      export default connectAdvanced((dispatch, options) => (state, props) => ({
      thing: state.things[props.thingId],
      saveThing: fields => dispatch(actionCreators.saveThing(props.thingId, fields)),
    }))(YourComponent)
    Access to dispatch is provided to the factory so selectorFactories can bind actionCreators
  outside of their selector as an optimization. Options passed to connectAdvanced are passed to
  the selectorFactory, along with displayName and WrappedComponent, as the second argument.
    Note that selectorFactory is responsible for all caching/memoization of inbound and outbound
  props. Do not use connectAdvanced directly without memoizing results between calls to your
  selector, otherwise the Connect component will re-render on every state or props change.
*/

// options object:

// If we aren't running in "pure" mode, we don't want to memoize values.

// To avoid conditionally calling hooks, we fall back to a tiny wrapper

// that just executes the given callback immediately.

// Distinguish between actual "data" props that were passed to the wrapper component,

// and values needed to control behavior (forwarded refs, alternate context instances).

// To maintain the wrapperProps object reference, memoize this destructuring.

// Users may optionally pass in a custom context instance to use instead of our ReactReduxContext.

// Memoize the check that determines which context instance we should use.

// Based on the previous check, one of these must be true

// The child props selector needs the store reference as an input.

// Re-create this selector whenever the store changes.

// This Subscription's source should match where store came from: props vs. context. A component

// connected to the store via props shouldn't use subscription from context, or vice versa.

// `notifyNestedSubs` is duplicated to handle the case where the component is unmounted in

// the middle of the notification loop, where `subscription` will then be null. This can

// probably be avoided if Subscription's listeners logic is changed to not call listeners

// that have been unsubscribed in the  middle of the notification loop.

// Otherwise, put this component's subscription instance into context, so that

// connected descendants won't update until after this component is done

// Propagate any mapState/mapDispatch errors upwards

// Set up refs to coordinate values between the subscription effect and the render logic

// Tricky logic here:

// - This render may have been triggered by a Redux store update that produced new child props

// - However, we may have gotten new wrapper props after that

// If we have new child props, and the same wrapper props, we know we should use the new child props as-is.

// But, if we have new wrapper props, those might change the child props, so we have to recalculate things.

// So, we'll use the child props from store update only if the wrapper props are the same as last time.

// TODO We're reading the store directly in render() here. Bad idea?

// This will likely cause Bad Things (TM) to happen in Concurrent Mode.

// Note that we do this because on renders _not_ caused by store updates, we need the latest store state

// to determine what the child props should be.

// We need this to execute synchronously every time we re-render. However, React warns

// about useLayoutEffect in SSR, so we try to detect environment and fall back to

// just useEffect instead to avoid the warning, since neither will run anyway.

// Our re-subscribe logic only runs when the store/subscription setup changes

// Now that all that's done, we can finally try to actually render the child component.

// We memoize the elements for the rendered child component as an optimization.

// If React sees the exact same element reference as last time, it bails out of re-rendering

// that child, same as if it was wrapped in React.memo() or returned false from shouldComponentUpdate.

// If we're in "pure" mode, ensure our wrapper component only re-renders when incoming props have changed.

// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/shallowEqual.js

// EXTERNAL MODULE: ./node_modules/redux/es/redux.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/isPlainObject.js

/**
 * @param {any} obj The object to inspect.
 * @returns {boolean} True if the argument appears to be a plain object.
 */

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/wrapMapToProps.js

// dependsOnOwnProps is used by createMapToPropsProxy to determine whether to pass props as args

// to the mapToProps function being wrapped. It is also used by makePurePropsSelector to determine

// whether mapToProps needs to be invoked when props have changed.

//

// A length of one signals that mapToProps does not depend on props from the parent component.

// A length of zero is assumed to mean mapToProps is getting args via arguments or ...args and

// therefore not reporting its length accurately..

// Used by whenMapStateToPropsIsFunction and whenMapDispatchToPropsIsFunction,

// this function wraps mapToProps in a proxy function which does several things:

//  * Detects whether the mapToProps function being called depends on props, which

//    is used by selectorFactory to decide if it should reinvoke on props changes.

//  * On first call, handles mapToProps if returns another function, and treats that

//    new function as the true mapToProps for subsequent calls.

//  * On first call, verifies the first result is a plain object, in order to warn

//    the developer that their mapToProps function is not returning a valid result.

// allow detectFactoryAndVerify to get ownProps

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/mapDispatchToProps.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/mapStateToProps.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/mergeProps.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/verifySubselectors.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/selectorFactory.js

// TODO: Add more comments

// If pure is true, the selector returned by selectorFactory will memoize its results,

// allowing connectAdvanced's shouldComponentUpdate to return false if final

// props have not changed. If false, the selector will always return a new

// object and shouldComponentUpdate will always return true.

// CONCATENATED MODULE: ./node_modules/react-redux/es/connect/connect.js

/*
  connect is a facade over connectAdvanced. It turns its args into a compatible
  selectorFactory, which has the signature:

    (dispatch, options) => (nextState, nextOwnProps) => nextFinalProps
  
  connect passes its args to connectAdvanced as options, which will in turn pass them to
  selectorFactory each time a Connect component instance is instantiated or hot reloaded.

  selectorFactory returns a final props selector from its mapStateToProps,
  mapStateToPropsFactories, mapDispatchToProps, mapDispatchToPropsFactories, mergeProps,
  mergePropsFactories, and pure args.

  The resulting final props selector is called by the Connect component instance whenever
  it receives new props or store state.
 */

// createConnect with default args builds the 'official' connect behavior. Calling it with

// different options opens up some testing and extensibility scenarios

// used in error messages

// used to compute Connect's displayName from the wrapped component's displayName.

// if mapStateToProps is falsy, the Connect component doesn't subscribe to store state changes

// passed through to selectorFactory

// CONCATENATED MODULE: ./node_modules/react-redux/es/hooks/useReduxContext.js

/**
 * A hook to access the value of the `ReactReduxContext`. This is a low-level
 * hook that you should usually not need to call directly.
 *
 * @returns {any} the value of the `ReactReduxContext`
 *
 * @example
 *
 * import React from 'react'
 * import { useReduxContext } from 'react-redux'
 *
 * export const CounterComponent = ({ value }) => {
 *   const { store } = useReduxContext()
 *   return <div>{store.getState()}</div>
 * }
 */

// CONCATENATED MODULE: ./node_modules/react-redux/es/hooks/useStore.js

/**
 * Hook factory, which creates a `useStore` hook bound to a given context.
 *
 * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
 * @returns {Function} A `useStore` hook bound to the specified context.
 */

/**
 * A hook to access the redux store.
 *
 * @returns {any} the redux store
 *
 * @example
 *
 * import React from 'react'
 * import { useStore } from 'react-redux'
 *
 * export const ExampleComponent = () => {
 *   const store = useStore()
 *   return <div>{store.getState()}</div>
 * }
 */

// CONCATENATED MODULE: ./node_modules/react-redux/es/hooks/useDispatch.js

/**
 * Hook factory, which creates a `useDispatch` hook bound to a given context.
 *
 * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
 * @returns {Function} A `useDispatch` hook bound to the specified context.
 */

/**
 * A hook to access the redux `dispatch` function.
 *
 * @returns {any|function} redux store's `dispatch` function
 *
 * @example
 *
 * import React, { useCallback } from 'react'
 * import { useDispatch } from 'react-redux'
 *
 * export const CounterComponent = ({ value }) => {
 *   const dispatch = useDispatch()
 *   const increaseCounter = useCallback(() => dispatch({ type: 'increase-counter' }), [])
 *   return (
 *     <div>
 *       <span>{value}</span>
 *       <button onClick={increaseCounter}>Increase counter</button>
 *     </div>
 *   )
 * }
 */

// CONCATENATED MODULE: ./node_modules/react-redux/es/hooks/useSelector.js

/**
 * Hook factory, which creates a `useSelector` hook bound to a given context.
 *
 * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
 * @returns {Function} A `useSelector` hook bound to the specified context.
 */

// we ignore all errors here, since when the component

// is re-rendered, the selectors are called again, and

// will throw again, if neither props nor store state

// changed

/**
 * A hook to access the redux store's state. This hook takes a selector function
 * as an argument. The selector is called with the store state.
 *
 * This hook takes an optional equality comparison function as the second parameter
 * that allows you to customize the way the selected state is compared to determine
 * whether the component needs to be re-rendered.
 *
 * @param {Function} selector the selector function
 * @param {Function=} equalityFn the function that will be used to determine equality
 *
 * @returns {any} the selected state
 *
 * @example
 *
 * import React from 'react'
 * import { useSelector } from 'react-redux'
 *
 * export const CounterComponent = () => {
 *   const counter = useSelector(state => state.counter)
 *   return <div>{counter}</div>
 * }
 */

// EXTERNAL MODULE: ./node_modules/react-dom/index.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/reactBatchedUpdates.js

/* eslint-disable import/no-unresolved */

// CONCATENATED MODULE: ./node_modules/react-redux/es/index.js

/* concated harmony reexport Provider */

/* concated harmony reexport connectAdvanced */

/* concated harmony reexport ReactReduxContext */

/* concated harmony reexport connect */

/* concated harmony reexport batch */

/* concated harmony reexport useDispatch */

/* concated harmony reexport createDispatchHook */

/* concated harmony reexport useSelector */

/* concated harmony reexport createSelectorHook */

/* concated harmony reexport useStore */

/* concated harmony reexport createStoreHook */

/* concated harmony reexport shallowEqual */

// 19.1.3.19 Object.setPrototypeOf(O, proto)

// B.2.2.3 Object.prototype.__defineSetter__(P, setter)

// B.2.3.9 String.prototype.italics()

// https://github.com/benjamingr/RexExp.escape

// 26.1.6 Reflect.get(target, propertyKey [, receiver])

/* , receiver */

// 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])

/* , thisArg */

// B.2.3.6 String.prototype.fixed()

// helper for String#{startsWith, endsWith, includes}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// Important!

// Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.

// By explicitly using `prop-types` you are opting into new production behavior.

// http://fb.me/prop-types-in-prod

// all enumerable object keys, includes symbols

// 20.2.2.20 Math.log1p(x)

/* WEBPACK VAR INJECTION */

// 19.1.3.10 Object.is(value1, value2)

// https://github.com/DavidBruant/Map-Set.prototype.toJSON

/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */

// A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).

// RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed

// by any combination of letters, digits, plus, period, or hyphen.

// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)

// 20.2.2.7 Math.atanh(x)

// Tor Browser bug: Math.atanh(-0) -> 0

/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */

// React v16.11 and below

// React v16.12 and above

// don't hoist over string (html) components

// Avoid failures from read-only properties

// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,

// backported and transplited with Babel, with backwards-compat fixes

// Copyright Joyent, Inc. and other Node contributors.

// Permission is hereby granted, free of charge, to any person obtaining a

// copy of this software and associated documentation files (the

// "Software"), to deal in the Software without restriction, including

// without limitation the rights to use, copy, modify, merge, publish,

// distribute, sublicense, and/or sell copies of the Software, and to permit

// persons to whom the Software is furnished to do so, subject to the

// following conditions:

// The above copyright notice and this permission notice shall be included

// in all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS

// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN

// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,

// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR

// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE

// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there

// must be no slashes, empty elements, or device names (c:\) in the array

// (so also no leading and trailing slashes - it does not distinguish

// relative and absolute paths)

// if the path tries to go above the root, `up` ends up > 0

// if the path is allowed to go above the root, restore leading ..s

// path.resolve([from ...], to)

// posix version

// String.prototype.substr - negative index don't work in IE8

// Skip empty and invalid entries

// At this point the path should be resolved to a full absolute path, but

// handle relative paths to be safe (might happen when process.cwd() fails)

// Normalize the path

// path.normalize(path)

// path.relative(from, to)

/*/*/

// We saw the first non-path separator

// Uses a mixed approach for backwards-compatibility, as ext behavior changed

// in new Node.js versions, so only basename() above is backported here

// If we reached a path separator that was not part of a set of path

// separators at the end of the string, stop now

// We saw the first non-path separator, mark this as the end of our

// path component

// extension

/*.*/

// If this is our first dot, mark it as the start of our extension

// We saw a non-dot and non-path separator before our dot, so we should

// have a good chance at having a non-empty extension

// We saw a non-dot character immediately before the dot

// The (right-most) trimmed path component is exactly '..'

// module.parent = undefined by default

// https://tc39.github.io/proposal-setmap-offrom/#sec-set.from

/**
 * This action type will be dispatched when your history
 * receives a location change.
 */

/**
 * This action type will be dispatched by the history actions below.
 * If you're writing a middleware to watch for navigation events, be sure to
 * look for actions of this type.
 */

/**
 * These actions correspond to the history API.
 * The associated routerMiddleware will capture these events before they get to
 * your reducer and reissue them as the matching function on your history.
 */

// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)

// MS Edge argumentsList argument is optional

/* empty */

/* , targetKey */

// V8 ~ Chromium 42- fails only with 5+ elements

// weak collections should not contains .clear method

// create collection constructor

// IE 8- don't enum bug keys

/* @preserve
 * Leaflet 1.6.0, a JS library for interactive maps. http://leafletjs.com
 * (c) 2010-2019 Vladimir Agafonkin, (c) 2010-2011 CloudMade
 */

/*
   * @namespace Util
   *
   * Various utility functions, used by Leaflet internally.
   */

// @function extend(dest: Object, src?: Object): Object

// Merges the properties of the `src` object (or multiple objects) into `dest` object and returns the latter. Has an `L.extend` shortcut.

// @function create(proto: Object, properties?: Object): Object

// Compatibility polyfill for [Object.create](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/create)

// @function bind(fn: Function, …): Function

// Returns a new function bound to the arguments passed, like [Function.prototype.bind](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).

// Has a `L.bind()` shortcut.

// @property lastId: Number

// Last unique ID used by [`stamp()`](#util-stamp)

// @function stamp(obj: Object): Number

// Returns the unique ID of an object, assigning it one if it doesn't have it.

/*eslint-disable */

/* eslint-enable */

// @function throttle(fn: Function, time: Number, context: Object): Function

// Returns a function which executes function `fn` with the given scope `context`

// (so that the `this` keyword refers to `context` inside `fn`'s code). The function

// `fn` will be called no more than one time per given amount of `time`. The arguments

// received by the bound function will be any arguments passed when binding the

// function, followed by any arguments passed when invoking the bound function.

// Has an `L.throttle` shortcut.

// reset lock and call if queued

// called too soon, queue to call later

// call and lock until later

// @function wrapNum(num: Number, range: Number[], includeMax?: Boolean): Number

// Returns the number `num` modulo `range` in such a way so it lies within

// `range[0]` and `range[1]`. The returned value will be always smaller than

// `range[1]` unless `includeMax` is set to `true`.

// @function falseFn(): Function

// Returns a function which always returns `false`.

// @function formatNum(num: Number, digits?: Number): Number

// Returns the number `num` rounded to `digits` decimals, or to 6 decimals by default.

// @function trim(str: String): String

// Compatibility polyfill for [String.prototype.trim](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim)

// @function splitWords(str: String): String[]

// Trims and splits the string on whitespace and returns the array of parts.

// @function setOptions(obj: Object, options: Object): Object

// Merges the given properties to the `options` of the `obj` object, returning the resulting options. See `Class options`. Has an `L.setOptions` shortcut.

// @function getParamString(obj: Object, existingUrl?: String, uppercase?: Boolean): String

// Converts an object into a parameter URL string, e.g. `{a: "foo", b: "bar"}`

// translates to `'?a=foo&b=bar'`. If `existingUrl` is set, the parameters will

// be appended at the end. If `uppercase` is `true`, the parameter names will

// be uppercased (e.g. `'?A=foo&B=bar'`)

// @function template(str: String, data: Object): String

// Simple templating facility, accepts a template string of the form `'Hello {a}, {b}'`

// and a data object like `{a: 'foo', b: 'bar'}`, returns evaluated string

// `('Hello foo, bar')`. You can also specify functions instead of strings for

// data values — they will be evaluated passing `data` as an argument.

// @function isArray(obj): Boolean

// Compatibility polyfill for [Array.isArray](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray)

// @function indexOf(array: Array, el: Object): Number

// Compatibility polyfill for [Array.prototype.indexOf](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf)

// @property emptyImageUrl: String

// Data URI string containing a base64-encoded empty GIF image.

// Used as a hack to free memory from unused images on WebKit-powered

// mobile devices (by setting image `src` to this string).

// inspired by http://paulirish.com/2011/requestanimationframe-for-smart-animating/

// fallback for IE 7-8

// @function requestAnimFrame(fn: Function, context?: Object, immediate?: Boolean): Number

// Schedules `fn` to be executed when the browser repaints. `fn` is bound to

// `context` if given. When `immediate` is set, `fn` is called immediately if

// the browser doesn't have native support for

// [`window.requestAnimationFrame`](https://developer.mozilla.org/docs/Web/API/window/requestAnimationFrame),

// otherwise it's delayed. Returns a request ID that can be used to cancel the request.

// @function cancelAnimFrame(id: Number): undefined

// Cancels a previous `requestAnimFrame`. See also [window.cancelAnimationFrame](https://developer.mozilla.org/docs/Web/API/window/cancelAnimationFrame).

// @class Class

// @aka L.Class

// @section

// @uninheritable

// Thanks to John Resig and Dean Edwards for inspiration!

/*
   * @class Evented
   * @aka L.Evented
   * @inherits Class
   *
   * A set of methods shared between event-powered classes (like `Map` and `Marker`). Generally, events allow you to execute some function when something happens with an object (e.g. the user clicks on the map, causing the map to fire `'click'` event).
   *
   * @example
   *
   * ```js
   * map.on('click', function(e) {
   * 	alert(e.latlng);
   * } );
   * ```
   *
   * Leaflet deals with event listeners by reference, so if you want to add a listener and then remove it, define it as a function:
   *
   * ```js
   * function onClick(e) { ... }
   *
   * map.on('click', onClick);
   * map.off('click', onClick);
   * ```
   */

// @function extend(props: Object): Function

// [Extends the current class](#class-inheritance) given the properties to be included.

// Returns a Javascript function that is a class constructor (to be called with `new`).

// call the constructor

// call all constructor hooks

// inherit parent's statics

// mix static properties into the class

// mix includes into the prototype

// merge options

// mix given properties into the prototype

// add method for calling all hooks

// @function include(properties: Object): this

// [Includes a mixin](#class-includes) into the current class.

// @function mergeOptions(options: Object): this

// [Merges `options`](#class-options) into the defaults of the class.

// @function addInitHook(fn: Function): this

// Adds a [constructor hook](#class-constructor-hooks) to the class.

// (Function) || (String, args...)

/* @method on(type: String, fn: Function, context?: Object): this
     * Adds a listener function (`fn`) to a particular event type of the object. You can optionally specify the context of the listener (object the this keyword will point to). You can also pass several space-separated types (e.g. `'click dblclick'`).
     *
     * @alternative
     * @method on(eventMap: Object): this
     * Adds a set of type/listener pairs, e.g. `{click: onClick, mousemove: onMouseMove}`
     */

// types can be a map of types/handlers

// we don't process space-separated events here for performance;

// it's a hot path since Layer uses the on(obj) syntax

// types can be a string of space-separated words

/* @method off(type: String, fn?: Function, context?: Object): this
     * Removes a previously added listener function. If no function is specified, it will remove all the listeners of that particular event from the object. Note that if you passed a custom context to `on`, you must pass the same context to `off` in order to remove the listener.
     *
     * @alternative
     * @method off(eventMap: Object): this
     * Removes a set of type/listener pairs.
     *
     * @alternative
     * @method off: this
     * Removes all listeners to all events on the object. This includes implicitly attached events.
     */

// clear all listeners if called without arguments

// attach listener (without syntactic sugar now)

/* get/init listeners for type */

// Less memory footprint.

// check if fn already there

// Set all removed listeners to noop so they are not called if remove happens in fire

// clear all listeners for a type if function isn't specified

// find fn and remove it

// set the removed listener to noop so that's not called if remove happens in fire

/* copy array in case events are being fired */

// @method fire(type: String, data?: Object, propagate?: Boolean): this

// Fires an event of the specified type. You can optionally provide an data

// object — the first argument of the listener function will contain its

// properties. The event can optionally be propagated to event parents.

// propagate the event to parents (set with addEventParent)

// @method listens(type: String): Boolean

// Returns `true` if a particular event type has any listeners attached to it.

// also check parents for listeners if event propagates

// @method once(…): this

// Behaves as [`on(…)`](#evented-on), except the listener will only get fired once and then removed.

// add a listener that's executed once and removed after that

// @method addEventParent(obj: Evented): this

// Adds an event parent - an `Evented` that will receive propagated events

// @method removeEventParent(obj: Evented): this

// Removes an event parent, so it will stop receiving propagated events

// aliases; we should ditch those eventually

// @method addEventListener(…): this

// Alias to [`on(…)`](#evented-on)

// @method removeEventListener(…): this

// Alias to [`off(…)`](#evented-off)

// @method clearAllEventListeners(…): this

// Alias to [`off()`](#evented-off)

// @method addOneTimeEventListener(…): this

// Alias to [`once(…)`](#evented-once)

// @method fireEvent(…): this

// Alias to [`fire(…)`](#evented-fire)

// @method hasEventListeners(…): Boolean

// Alias to [`listens(…)`](#evented-listens)

/*
   * @class Point
   * @aka L.Point
   *
   * Represents a point with `x` and `y` coordinates in pixels.
   *
   * @example
   *
   * ```js
   * var point = L.point(200, 300);
   * ```
   *
   * All Leaflet methods and options that accept `Point` objects also accept them in a simple Array form (unless noted otherwise), so these lines are equivalent:
   *
   * ```js
   * map.panBy([200, 300]);
   * map.panBy(L.point(200, 300));
   * ```
   *
   * Note that `Point` does not inherit from Leafet's `Class` object,
   * which means new classes can't inherit from it, and new methods
   * can't be added to it with the `include` function.
   */

// @property x: Number; The `x` coordinate of the point

// @property y: Number; The `y` coordinate of the point

// @factory L.point(x: Number, y: Number, round?: Boolean)

// Creates a Point object with the given `x` and `y` coordinates. If optional `round` is set to true, rounds the `x` and `y` values.

// @alternative

// @factory L.point(coords: Number[])

// Expects an array of the form `[x, y]` instead.

// @factory L.point(coords: Object)

// Expects a plain object of the form `{x: Number, y: Number}` instead.

/*
   * @class Bounds
   * @aka L.Bounds
   *
   * Represents a rectangular area in pixel coordinates.
   *
   * @example
   *
   * ```js
   * var p1 = L.point(10, 10),
   * p2 = L.point(40, 60),
   * bounds = L.bounds(p1, p2);
   * ```
   *
   * All Leaflet methods that accept `Bounds` objects also accept them in a simple Array form (unless noted otherwise), so the bounds example above can be passed like this:
   *
   * ```js
   * otherBounds.intersects([[10, 10], [40, 60]]);
   * ```
   *
   * Note that `Bounds` does not inherit from Leafet's `Class` object,
   * which means new classes can't inherit from it, and new methods
   * can't be added to it with the `include` function.
   */

// @factory L.bounds(corner1: Point, corner2: Point)

// Creates a Bounds object from two corners coordinate pairs.

// @factory L.bounds(points: Point[])

// Creates a Bounds object from the given array of points.

/*
   * @class LatLngBounds
   * @aka L.LatLngBounds
   *
   * Represents a rectangular geographical area on a map.
   *
   * @example
   *
   * ```js
   * var corner1 = L.latLng(40.712, -74.227),
   * corner2 = L.latLng(40.774, -74.125),
   * bounds = L.latLngBounds(corner1, corner2);
   * ```
   *
   * All Leaflet methods that accept LatLngBounds objects also accept them in a simple Array form (unless noted otherwise), so the bounds example above can be passed like this:
   *
   * ```js
   * map.fitBounds([
   * 	[40.712, -74.227],
   * 	[40.774, -74.125]
   * ]);
   * ```
   *
   * Caution: if the area crosses the antimeridian (often confused with the International Date Line), you must specify corners _outside_ the [-180, 180] degrees longitude range.
   *
   * Note that `LatLngBounds` does not inherit from Leafet's `Class` object,
   * which means new classes can't inherit from it, and new methods
   * can't be added to it with the `include` function.
   */

// (LatLng, LatLng) or (LatLng[])

// TODO International date line?

// @factory L.latLngBounds(corner1: LatLng, corner2: LatLng)

// Creates a `LatLngBounds` object by defining two diagonally opposite corners of the rectangle.

// @factory L.latLngBounds(latlngs: LatLng[])

// Creates a `LatLngBounds` object defined by the geographical points it contains. Very useful for zooming the map to fit a particular set of locations with [`fitBounds`](#map-fitbounds).

/* @class LatLng
   * @aka L.LatLng
   *
   * Represents a geographical point with a certain latitude and longitude.
   *
   * @example
   *
   * ```
   * var latlng = L.latLng(50.5, 30.5);
   * ```
   *
   * All Leaflet methods that accept LatLng objects also accept them in a simple Array form and simple object form (unless noted otherwise), so these lines are equivalent:
   *
   * ```
   * map.panTo([50, 30]);
   * map.panTo({lon: 30, lat: 50});
   * map.panTo({lat: 50, lng: 30});
   * map.panTo(L.latLng(50, 30));
   * ```
   *
   * Note that `LatLng` does not inherit from Leaflet's `Class` object,
   * which means new classes can't inherit from it, and new methods
   * can't be added to it with the `include` function.
   */

// @property lat: Number

// Latitude in degrees

// @property lng: Number

// Longitude in degrees

// @property alt: Number

// Altitude in meters (optional)

// @factory L.latLng(latitude: Number, longitude: Number, altitude?: Number): LatLng

// Creates an object representing a geographical point with the given latitude and longitude (and optionally altitude).

// @factory L.latLng(coords: Array): LatLng

// Expects an array of the form `[Number, Number]` or `[Number, Number, Number]` instead.

// @factory L.latLng(coords: Object): LatLng

// Expects an plain object of the form `{lat: Number, lng: Number}` or `{lat: Number, lng: Number, alt: Number}` instead.

/*
   * @namespace CRS
   * @crs L.CRS.Base
   * Object that defines coordinate reference systems for projecting
   * geographical points into pixel (screen) coordinates and back (and to
   * coordinates in other units for [WMS](https://en.wikipedia.org/wiki/Web_Map_Service) services). See
   * [spatial reference system](http://en.wikipedia.org/wiki/Coordinate_reference_system).
   *
   * Leaflet defines the most usual CRSs by default. If you want to use a
   * CRS not defined by default, take a look at the
   * [Proj4Leaflet](https://github.com/kartena/Proj4Leaflet) plugin.
   *
   * Note that the CRS instances do not inherit from Leafet's `Class` object,
   * and can't be instantiated. Also, new classes can't inherit from them,
   * and methods can't be added to them with the `include` function.
   */

// @method clone(): Point

// Returns a copy of the current point.

// @method add(otherPoint: Point): Point

// Returns the result of addition of the current and the given points.

// non-destructive, returns a new point

// destructive, used directly for performance in situations where it's safe to modify existing point

// @method subtract(otherPoint: Point): Point

// Returns the result of subtraction of the given point from the current.

// @method divideBy(num: Number): Point

// Returns the result of division of the current point by the given number.

// @method multiplyBy(num: Number): Point

// Returns the result of multiplication of the current point by the given number.

// @method scaleBy(scale: Point): Point

// Multiply each coordinate of the current point by each coordinate of

// `scale`. In linear algebra terms, multiply the point by the

// [scaling matrix](https://en.wikipedia.org/wiki/Scaling_%28geometry%29#Matrix_representation)

// defined by `scale`.

// @method unscaleBy(scale: Point): Point

// Inverse of `scaleBy`. Divide each coordinate of the current point by

// each coordinate of `scale`.

// @method round(): Point

// Returns a copy of the current point with rounded coordinates.

// @method floor(): Point

// Returns a copy of the current point with floored coordinates (rounded down).

// @method ceil(): Point

// Returns a copy of the current point with ceiled coordinates (rounded up).

// @method trunc(): Point

// Returns a copy of the current point with truncated coordinates (rounded towards zero).

// @method distanceTo(otherPoint: Point): Number

// Returns the cartesian distance between the current and the given points.

// @method equals(otherPoint: Point): Boolean

// Returns `true` if the given point has the same coordinates.

// @method contains(otherPoint: Point): Boolean

// Returns `true` if both coordinates of the given point are less than the corresponding current point coordinates (in absolute values).

// @method toString(): String

// Returns a string representation of the point for debugging purposes.

// @method extend(point: Point): this

// Extends the bounds to contain the given point.

// (Point)

// @property min: Point

// The top left corner of the rectangle.

// @property max: Point

// The bottom right corner of the rectangle.

// @method getCenter(round?: Boolean): Point

// Returns the center point of the bounds.

// @method getBottomLeft(): Point

// Returns the bottom-left point of the bounds.

// @method getTopRight(): Point

// Returns the top-right point of the bounds.

// -> Point

// @method getTopLeft(): Point

// Returns the top-left point of the bounds (i.e. [`this.min`](#bounds-min)).

// left, top

// @method getBottomRight(): Point

// Returns the bottom-right point of the bounds (i.e. [`this.max`](#bounds-max)).

// right, bottom

// @method getSize(): Point

// Returns the size of the given bounds

// @method contains(otherBounds: Bounds): Boolean

// Returns `true` if the rectangle contains the given one.

// @method contains(point: Point): Boolean

// Returns `true` if the rectangle contains the given point.

// @method intersects(otherBounds: Bounds): Boolean

// Returns `true` if the rectangle intersects the given bounds. Two bounds

// intersect if they have at least one point in common.

// (Bounds) -> Boolean

// @method overlaps(otherBounds: Bounds): Boolean

// Returns `true` if the rectangle overlaps the given bounds. Two bounds

// overlap if their intersection is an area.

// @method extend(latlng: LatLng): this

// Extend the bounds to contain the given point

// @method extend(otherBounds: LatLngBounds): this

// Extend the bounds to contain the given bounds

// @method pad(bufferRatio: Number): LatLngBounds

// Returns bounds created by extending or retracting the current bounds by a given ratio in each direction.

// For example, a ratio of 0.5 extends the bounds by 50% in each direction.

// Negative values will retract the bounds.

// @method getCenter(): LatLng

// @method getSouthWest(): LatLng

// Returns the south-west point of the bounds.

// @method getNorthEast(): LatLng

// Returns the north-east point of the bounds.

// @method getNorthWest(): LatLng

// Returns the north-west point of the bounds.

// @method getSouthEast(): LatLng

// Returns the south-east point of the bounds.

// @method getWest(): Number

// Returns the west longitude of the bounds

// @method getSouth(): Number

// Returns the south latitude of the bounds

// @method getEast(): Number

// Returns the east longitude of the bounds

// @method getNorth(): Number

// Returns the north latitude of the bounds

// @method contains(otherBounds: LatLngBounds): Boolean

// @method contains (latlng: LatLng): Boolean

// (LatLngBounds) or (LatLng) -> Boolean

// @method intersects(otherBounds: LatLngBounds): Boolean

// Returns `true` if the rectangle intersects the given bounds. Two bounds intersect if they have at least one point in common.

// Returns `true` if the rectangle overlaps the given bounds. Two bounds overlap if their intersection is an area.

// @method toBBoxString(): String

// Returns a string with bounding box coordinates in a 'southwest_lng,southwest_lat,northeast_lng,northeast_lat' format. Useful for sending requests to web services that return geo data.

// @method equals(otherBounds: LatLngBounds, maxMargin?: Number): Boolean

// Returns `true` if the rectangle is equivalent (within a small margin of error) to the given bounds. The margin of error can be overridden by setting `maxMargin` to a small number.

// @method isValid(): Boolean

// Returns `true` if the bounds are properly initialized.

// @method equals(otherLatLng: LatLng, maxMargin?: Number): Boolean

// Returns `true` if the given `LatLng` point is at the same position (within a small margin of error). The margin of error can be overridden by setting `maxMargin` to a small number.

// Returns a string representation of the point (for debugging purposes).

// @method distanceTo(otherLatLng: LatLng): Number

// Returns the distance (in meters) to the given `LatLng` calculated using the [Spherical Law of Cosines](https://en.wikipedia.org/wiki/Spherical_law_of_cosines).

// @method wrap(): LatLng

// Returns a new `LatLng` object with the longitude wrapped so it's always between -180 and +180 degrees.

// @method toBounds(sizeInMeters: Number): LatLngBounds

// Returns a new `LatLngBounds` object in which each boundary is `sizeInMeters/2` meters apart from the `LatLng`.

// @method latLngToPoint(latlng: LatLng, zoom: Number): Point

// Projects geographical coordinates into pixel coordinates for a given zoom.

// @method pointToLatLng(point: Point, zoom: Number): LatLng

// The inverse of `latLngToPoint`. Projects pixel coordinates on a given

// zoom into geographical coordinates.

// @method project(latlng: LatLng): Point

// Projects geographical coordinates into coordinates in units accepted for

// this CRS (e.g. meters for EPSG:3857, for passing it to WMS services).

// @method unproject(point: Point): LatLng

// Given a projected coordinate returns the corresponding LatLng.

// The inverse of `project`.

// @method scale(zoom: Number): Number

// Returns the scale used when transforming projected coordinates into

// pixel coordinates for a particular zoom. For example, it returns

// `256 * 2^zoom` for Mercator-based CRS.

// @method zoom(scale: Number): Number

// Inverse of `scale()`, returns the zoom level corresponding to a scale

// factor of `scale`.

// @method getProjectedBounds(zoom: Number): Bounds

// Returns the projection's bounds scaled and transformed for the provided `zoom`.

// @method distance(latlng1: LatLng, latlng2: LatLng): Number

// Returns the distance between two geographical coordinates.

// @property code: String

// Standard code name of the CRS passed into WMS services (e.g. `'EPSG:3857'`)

// @property wrapLng: Number[]

// An array of two numbers defining whether the longitude (horizontal) coordinate

// axis wraps around a given range and how. Defaults to `[-180, 180]` in most

// geographical CRSs. If `undefined`, the longitude axis does not wrap around.

// @property wrapLat: Number[]

// Like `wrapLng`, but for the latitude (vertical) axis.

// wrapLng: [min, max],

// wrapLat: [min, max],

// @property infinite: Boolean

// If true, the coordinate space will be unbounded (infinite in both axes)

// @method wrapLatLng(latlng: LatLng): LatLng

// Returns a `LatLng` where lat and lng has been wrapped according to the

// CRS's `wrapLat` and `wrapLng` properties, if they are outside the CRS's bounds.

// @method wrapLatLngBounds(bounds: LatLngBounds): LatLngBounds

// Returns a `LatLngBounds` with the same size as the given one, ensuring

// that its center is within the CRS's bounds.

// Only accepts actual `L.LatLngBounds` instances, not arrays.

// Mean Earth Radius, as recommended for use by

// the International Union of Geodesy and Geophysics,

// see http://rosettacode.org/wiki/Haversine_formula

// distance between two geographical points using spherical law of cosines approximation

/*
   * @namespace CRS
   * @crs L.CRS.Earth
   *
   * Serves as the base for CRS that are global such that they cover the earth.
   * Can only be used as the base for other CRS and cannot be used directly,
   * since it does not have a `code`, `projection` or `transformation`. `distance()` returns
   * meters.
   */

/*
   * @class Transformation
   * @aka L.Transformation
   *
   * Represents an affine transformation: a set of coefficients `a`, `b`, `c`, `d`
   * for transforming a point of a form `(x, y)` into `(a*x + b, c*y + d)` and doing
   * the reverse. Used by Leaflet in its projections code.
   *
   * @example
   *
   * ```js
   * var transformation = L.transformation(2, 5, -1, 10),
   * 	p = L.point(1, 2),
   * 	p2 = transformation.transform(p), //  L.point(7, 8)
   * 	p3 = transformation.untransform(p2); //  L.point(1, 2)
   * ```
   */

// factory new L.Transformation(a: Number, b: Number, c: Number, d: Number)

// Creates a `Transformation` object with the given coefficients.

// use array properties

// factory L.transformation(a: Number, b: Number, c: Number, d: Number)

// @factory L.transformation(a: Number, b: Number, c: Number, d: Number)

// Instantiates a Transformation object with the given coefficients.

// @factory L.transformation(coefficients: Array): Transformation

// Expects an coefficients array of the form

// `[a: Number, b: Number, c: Number, d: Number]`.

/*
   * @namespace CRS
   * @crs L.CRS.EPSG3857
   *
   * The most common CRS for online maps, used by almost all free and commercial
   * tile providers. Uses Spherical Mercator projection. Set in by default in
   * Map's `crs` option.
   */

// @method transform(point: Point, scale?: Number): Point

// Returns a transformed point, optionally multiplied by the given scale.

// Only accepts actual `L.Point` instances, not arrays.

// (Point, Number) -> Point

// destructive transform (faster)

// @method untransform(point: Point, scale?: Number): Point

// Returns the reverse transformation of the given point, optionally divided

// by the given scale. Only accepts actual `L.Point` instances, not arrays.

// @namespace SVG; @section

// There are several static functions which can be called without instantiating L.SVG:

// @function create(name: String): SVGElement

// Returns a instance of [SVGElement](https://developer.mozilla.org/docs/Web/API/SVGElement),

// corresponding to the class name passed. For example, using 'line' will return

// an instance of [SVGLineElement](https://developer.mozilla.org/docs/Web/API/SVGLineElement).

// @function pointsToPath(rings: Point[], closed: Boolean): String

// Generates a SVG path string for multiple rings, with each ring turning

// into "M..L..L.." instructions

// closes the ring for polygons; "x" is VML syntax

// SVG complains about empty path strings

/*
   * @namespace Browser
   * @aka L.Browser
   *
   * A namespace with static properties for browser/feature detection used by Leaflet internally.
   *
   * @example
   *
   * ```js
   * if (L.Browser.ielt9) {
   *   alert('Upgrade your browser, dude!');
   * }
   * ```
   */

// Errors can safely be ignored since this is only a browser support test.

// @property ie: Boolean; `true` for all Internet Explorer versions (not Edge).

/*
   * Extends L.DomEvent to provide touch support for Internet Explorer and Windows-based devices.
   */

// Provides a touch events wrapper for (ms)pointer events.

// ref http://www.w3.org/TR/pointerevents/ https://www.w3.org/Bugs/Public/show_bug.cgi?id=22890

// In IE11, some touch events needs to fire for form controls, or

// the controls will stop working. We keep a whitelist of tag names that

// need these events. For other target tags, we prevent default on the event.

// need to keep track of what pointers and how many are active to provide e.touches emulation

// we listen documentElement as any drags that end by moving the touch off the screen get fired there

// don't fire touch moves when mouse isn't down

/*
   * Extends the event handling code with double tap support for mobile browsers.
   */

// inspired by Zepto touch code by Thomas Fuchs

// work around .type being readonly with MSPointer* events

// On some platforms (notably, chrome<55 on win10 + touchscreen + mouse),

// the browser doesn't fire touchend/pointerup events but does fire

// native dblclicks. See #4127.

// Edge 14 also fires native dblclicks, but only for pointerType mouse, see #5180.

/*
   * @namespace DomUtil
   *
   * Utility functions to work with the [DOM](https://developer.mozilla.org/docs/Web/API/Document_Object_Model)
   * tree, used by Leaflet internally.
   *
   * Most functions expecting or returning a `HTMLElement` also work for
   * SVG elements. The only difference is that classes refer to CSS classes
   * in HTML and SVG classes in SVG.
   */

// @property TRANSFORM: String

// Vendor-prefixed transform style name (e.g. `'webkitTransform'` for WebKit).

// webkitTransition comes first because some browser versions that drop vendor prefix don't do

// the same for the transitionend event, in particular the Android 4.1 stock browser

// @property TRANSITION: String

// Vendor-prefixed transition style name.

// @function get(id: String|HTMLElement): HTMLElement

// Returns an element given its DOM id, or returns the element itself

// if it was passed directly.

// @function getStyle(el: HTMLElement, styleAttrib: String): String

// Returns the value for a certain style attribute on an element,

// including computed values or values set through CSS.

// @function create(tagName: String, className?: String, container?: HTMLElement): HTMLElement

// Creates an HTML element with `tagName`, sets its class to `className`, and optionally appends it to `container` element.

// @function remove(el: HTMLElement)

// Removes `el` from its parent element

// @function empty(el: HTMLElement)

// Removes all of `el`'s children elements from `el`

// @function toFront(el: HTMLElement)

// Makes `el` the last child of its parent, so it renders in front of the other children.

// @function toBack(el: HTMLElement)

// Makes `el` the first child of its parent, so it renders behind the other children.

// @function hasClass(el: HTMLElement, name: String): Boolean

// Returns `true` if the element's class attribute contains `name`.

// @function addClass(el: HTMLElement, name: String)

// Adds `name` to the element's class attribute.

// @function removeClass(el: HTMLElement, name: String)

// Removes `name` from the element's class attribute.

// @function setClass(el: HTMLElement, name: String)

// Sets the element's class.

// in case of SVG element

// @function getClass(el: HTMLElement): String

// Returns the element's class.

// Check if the element is an SVGElementInstance and use the correspondingElement instead

// (Required for linked SVG elements in IE11.)

// @function setOpacity(el: HTMLElement, opacity: Number)

// Set the opacity of an element (including old IE support).

// `opacity` must be a number from `0` to `1`.

// filters collection throws an error if we try to retrieve a filter that doesn't exist

// don't set opacity to 1 if we haven't already set an opacity,

// it isn't needed and breaks transparent pngs.

// @function testProp(props: String[]): String|false

// Goes through the array of style names and returns the first name

// that is a valid style name for an element. If no such name is found,

// it returns false. Useful for vendor-prefixed styles like `transform`.

// @function setTransform(el: HTMLElement, offset: Point, scale?: Number)

// Resets the 3D CSS transform of `el` so it is translated by `offset` pixels

// and optionally scaled by `scale`. Does not have an effect if the

// browser doesn't support 3D CSS transforms.

// @function setPosition(el: HTMLElement, position: Point)

// Sets the position of `el` to coordinates specified by `position`,

// using CSS translate or top/left positioning depending on the browser

// (used by Leaflet internally to position its layers).

// @function getPosition(el: HTMLElement): Point

// Returns the coordinates of an element previously positioned with setPosition.

// this method is only used for elements previously positioned using setPosition,

// so it's safe to cache the position for performance

// @function disableTextSelection()

// Prevents the user from generating `selectstart` DOM events, usually generated

// when the user drags the mouse through a page with text. Used internally

// by Leaflet to override the behaviour of any click-and-drag interaction on

// the map. Affects drag interactions on the whole document.

// @function enableTextSelection()

// Cancels the effects of a previous [`L.DomUtil.disableTextSelection`](#domutil-disabletextselection).

// @function disableImageDrag()

// As [`L.DomUtil.disableTextSelection`](#domutil-disabletextselection), but

// for `dragstart` DOM events, usually generated when the user drags an image.

// @function enableImageDrag()

// Cancels the effects of a previous [`L.DomUtil.disableImageDrag`](#domutil-disabletextselection).

// @function preventOutline(el: HTMLElement)

// Makes the [outline](https://developer.mozilla.org/docs/Web/CSS/outline)

// of the element `el` invisible. Used internally by Leaflet to prevent

// focusable elements from displaying an outline when the user performs a

// drag interaction on them.

// @function restoreOutline()

// Cancels the effects of a previous [`L.DomUtil.preventOutline`]().

// @function getSizedParentNode(el: HTMLElement): HTMLElement

// Finds the closest parent node which size (width and height) is not null.

// @function getScale(el: HTMLElement): Object

// Computes the CSS scale currently applied on the element.

// Returns an object with `x` and `y` members as horizontal and vertical scales respectively,

// and `boundingClientRect` as the result of [`getBoundingClientRect()`](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect).

// Read-only in old browsers.

/*
   * @namespace DomEvent
   * Utility functions to work with the [DOM events](https://developer.mozilla.org/docs/Web/API/Event), used by Leaflet internally.
   */

// Inspired by John Resig, Dean Edwards and YUI addEvent implementations.

// @function on(el: HTMLElement, types: String, fn: Function, context?: Object): this

// Adds a listener function (`fn`) to a particular DOM event type of the

// element `el`. You can optionally specify the context of the listener

// (object the `this` keyword will point to). You can also pass several

// space-separated types (e.g. `'click dblclick'`).

// @function on(el: HTMLElement, eventMap: Object, context?: Object): this

// Adds a set of type/listener pairs, e.g. `{click: onClick, mousemove: onMouseMove}`

// @function off(el: HTMLElement, types: String, fn: Function, context?: Object): this

// Removes a previously added listener function.

// Note that if you passed a custom context to on, you must pass the same

// context to `off` in order to remove the listener.

// @function off(el: HTMLElement, eventMap: Object, context?: Object): this

// Removes a set of type/listener pairs, e.g. `{click: onClick, mousemove: onMouseMove}`

// Needs DomEvent.Pointer.js

// Chrome >55 does not need the synthetic dblclicks from addDoubleTapListener

// See #5180

// @function stopPropagation(ev: DOMEvent): this

// Stop the given event from propagation to parent elements. Used inside the listener functions:

// ```js

// L.DomEvent.on(div, 'click', function (ev) {

// 	L.DomEvent.stopPropagation(ev);

// });

// ```

// In case of Leaflet event.

// @function disableScrollPropagation(el: HTMLElement): this

// Adds `stopPropagation` to the element's `'mousewheel'` events (plus browser variants).

// @function disableClickPropagation(el: HTMLElement): this

// Adds `stopPropagation` to the element's `'click'`, `'doubleclick'`,

// `'mousedown'` and `'touchstart'` events (plus browser variants).

// @function preventDefault(ev: DOMEvent): this

// Prevents the default action of the DOM Event `ev` from happening (such as

// following a link in the href of the a element, or doing a POST request

// with page reload when a `<form>` is submitted).

// Use it inside listener functions.

// @function stop(ev: DOMEvent): this

// Does `stopPropagation` and `preventDefault` at the same time.

// @function getMousePosition(ev: DOMEvent, container?: HTMLElement): Point

// Gets normalized mouse position from a DOM event relative to the

// `container` (border excluded) or to the whole page if not specified.

// left and top  values are in page scale (like the event clientX/Y)

// offset.left/top values are in page scale (like clientX/Y),

// whereas clientLeft/Top (border width) values are the original values (before CSS scale applies).

// Chrome on Win scrolls double the pixels as in other platforms (see #4538),

// and Firefox scrolls device pixels, not CSS pixels

// @function getWheelDelta(ev: DOMEvent): Number

// Gets normalized wheel delta from a mousewheel DOM event, in vertical

// pixels scrolled (negative if scrolling down).

// Events from pointing devices without precise scrolling are mapped to

// a best guess of 60 pixels.

// Don't trust window-geometry-based delta

// Pixels

// Lines

// Pages

// Skip horizontal/depth wheel events

// Legacy IE pixels

// Legacy Moz lines

// Legacy Moz pages

// fakes stopPropagation by setting a special event flag, checked/reset with skipped(e)

// reset when checking, as it's only used in map container and propagates outside of the map

// check if element really left/entered the event target (for mouseenter/mouseleave)

// this is a horrible workaround for a bug in Android where a single touch triggers two click events

// are they closer together than 500ms yet more than 100ms?

// Android typically triggers them ~300ms apart while multiple listeners

// on the same event should be triggered far faster;

// or check if click is simulated on the element, and if it is, reject any non-simulated events

// @method run(el: HTMLElement, newPos: Point, duration?: Number, easeLinearity?: Number)

// Run an animation of a given element to a new position, optionally setting

// duration in seconds (`0.25` by default) and easing linearity factor (3rd

// argument of the [cubic bezier curve](http://cubic-bezier.com/#0,0,.5,1),

// `0.5` by default).

// @event start: Event

// Fired when the animation starts

// @method stop()

// Stops the animation (if currently running).

// animation loop

// @event step: Event

// Fired continuously during the animation.

// @event end: Event

// Fired when the animation ends.

// @section Map State Options

// @option crs: CRS = L.CRS.EPSG3857

// The [Coordinate Reference System](#crs) to use. Don't change this if you're not

// sure what it means.

// @option center: LatLng = undefined

// Initial geographic center of the map

// @option zoom: Number = undefined

// Initial map zoom level

// @option minZoom: Number = *

// Minimum zoom level of the map.

// If not specified and at least one `GridLayer` or `TileLayer` is in the map,

// the lowest of their `minZoom` options will be used instead.

// @option maxZoom: Number = *

// Maximum zoom level of the map.

// the highest of their `maxZoom` options will be used instead.

// @option layers: Layer[] = []

// Array of layers that will be added to the map initially

// @option maxBounds: LatLngBounds = null

// When this option is set, the map restricts the view to the given

// geographical bounds, bouncing the user back if the user tries to pan

// outside the view. To set the restriction dynamically, use

// [`setMaxBounds`](#map-setmaxbounds) method.

// @option renderer: Renderer = *

// The default method for drawing vector layers on the map. `L.SVG`

// or `L.Canvas` by default depending on browser support.

// @section Animation Options

// @option zoomAnimation: Boolean = true

// Whether the map zoom animation is enabled. By default it's enabled

// in all browsers that support CSS3 Transitions except Android.

// @option zoomAnimationThreshold: Number = 4

// Won't animate zoom if the zoom difference exceeds this value.

// @option fadeAnimation: Boolean = true

// Whether the tile fade animation is enabled. By default it's enabled

// @option markerZoomAnimation: Boolean = true

// Whether markers animate their zoom with the zoom animation, if disabled

// they will disappear for the length of the animation. By default it's

// enabled in all browsers that support CSS3 Transitions except Android.

// @option transform3DLimit: Number = 2^23

// Defines the maximum size of a CSS translation transform. The default

// value should not be changed unless a web browser positions layers in

// the wrong place after doing a large `panBy`.

// Precision limit of a 32-bit float

// @section Interaction Options

// @option zoomSnap: Number = 1

// Forces the map's zoom level to always be a multiple of this, particularly

// right after a [`fitBounds()`](#map-fitbounds) or a pinch-zoom.

// By default, the zoom level snaps to the nearest integer; lower values

// (e.g. `0.5` or `0.1`) allow for greater granularity. A value of `0`

// means the zoom level will not be snapped after `fitBounds` or a pinch-zoom.

// @option zoomDelta: Number = 1

// Controls how much the map's zoom level will change after a

// [`zoomIn()`](#map-zoomin), [`zoomOut()`](#map-zoomout), pressing `+`

// or `-` on the keyboard, or using the [zoom controls](#control-zoom).

// Values smaller than `1` (e.g. `0.5`) allow for greater granularity.

// @option trackResize: Boolean = true

// Whether the map automatically handles browser window resize to update itself.

// (HTMLElement or String, Object)

// Make sure to assign internal flags at the beginning,

// to avoid inconsistent state in some edge cases.

// hack for https://github.com/Leaflet/Leaflet/issues/1980

// don't animate on browsers without hardware-accelerated transitions or old Android/Opera

// zoom transitions run with the same duration for all layers, so if one of transitionend events

// happens after starting zoom animation (propagating to the map pane), we know that it ended globally

// @section Methods for modifying map state

// @method setView(center: LatLng, zoom: Number, options?: Zoom/pan options): this

// Sets the view of the map (geographical center and zoom) with the given

// animation options.

// try animating pan or zoom

// prevent resize handler call, the view will refresh after animation anyway

// animation didn't start, just reset the map view

// @method setZoom(zoom: Number, options?: Zoom/pan options): this

// Sets the zoom of the map.

// @method zoomIn(delta?: Number, options?: Zoom options): this

// Increases the zoom of the map by `delta` ([`zoomDelta`](#map-zoomdelta) by default).

// @method zoomOut(delta?: Number, options?: Zoom options): this

// Decreases the zoom of the map by `delta` ([`zoomDelta`](#map-zoomdelta) by default).

// @method setZoomAround(latlng: LatLng, zoom: Number, options: Zoom options): this

// Zooms the map while keeping a specified geographical point on the map

// stationary (e.g. used internally for scroll zoom and double-click zoom).

// @method setZoomAround(offset: Point, zoom: Number, options: Zoom options): this

// Zooms the map while keeping a specified pixel on the map (relative to the top-left corner) stationary.

// @method fitBounds(bounds: LatLngBounds, options?: fitBounds options): this

// Sets a map view that contains the given geographical bounds with the

// maximum zoom level possible.

// @method fitWorld(options?: fitBounds options): this

// Sets a map view that mostly contains the whole world with the maximum

// zoom level possible.

// @method panTo(latlng: LatLng, options?: Pan options): this

// Pans the map to a given center.

// (LatLng)

// @method panBy(offset: Point, options?: Pan options): this

// Pans the map by a given number of pixels (animated).

// If we pan too far, Chrome gets issues with tiles

// and makes them disappear or appear in the wrong place (slightly offset) #2602

// don't fire movestart if animating inertia

// animate pan unless animate: false specified

// @method flyTo(latlng: LatLng, zoom?: Number, options?: Zoom/pan options): this

// Sets the view of the map (geographical center and zoom) performing a smooth

// pan-zoom animation.

// workaround for floating point precision bug when sq = 0, log = -Infinite,

// thus triggering an infinite loop in flyTo

// @method flyToBounds(bounds: LatLngBounds, options?: fitBounds options): this

// Sets the view of the map with a smooth animation like [`flyTo`](#map-flyto),

// but takes a bounds parameter like [`fitBounds`](#map-fitbounds).

// @method setMaxBounds(bounds: Bounds): this

// Restricts the map view to the given bounds (see the [maxBounds](#map-maxbounds) option).

// @method setMinZoom(zoom: Number): this

// Sets the lower limit for the available zoom levels (see the [minZoom](#map-minzoom) option).

// @method setMaxZoom(zoom: Number): this

// Sets the upper limit for the available zoom levels (see the [maxZoom](#map-maxzoom) option).

// @method panInsideBounds(bounds: LatLngBounds, options?: Pan options): this

// Pans the map to the closest view that would lie inside the given bounds (if it's not already), controlling the animation using the options specific, if any.

// @method panInside(latlng: LatLng, options?: options): this

// Pans the map the minimum amount to make the `latlng` visible. Use

// `padding`, `paddingTopLeft` and `paddingTopRight` options to fit

// the display to more restricted bounds, like [`fitBounds`](#map-fitbounds).

// If `latlng` is already within the (optionally padded) display bounds,

// the map will not be panned.

// @method invalidateSize(options: Zoom/pan options): this

// Checks if the map container size changed and updates the map if so —

// call it after you've changed the map size dynamically, also animating

// pan by default. If `options.pan` is `false`, panning will not occur.

// If `options.debounceMoveend` is `true`, it will delay `moveend` event so

// that it doesn't happen often even if the method is called many

// times in a row.

// @method invalidateSize(animate: Boolean): this

// pan by default.

// @section Map state change events

// @event resize: ResizeEvent

// Fired when the map is resized.

// @method stop(): this

// Stops the currently running `panTo` or `flyTo` animation, if any.

// @section Geolocation methods

// @method locate(options?: Locate options): this

// Tries to locate the user using the Geolocation API, firing a [`locationfound`](#map-locationfound)

// event with location data on success or a [`locationerror`](#map-locationerror) event on failure,

// and optionally sets the map view to the user's location with respect to

// detection accuracy (or to the world view if geolocation failed).

// Note that, if your page doesn't use HTTPS, this method will fail in

// modern browsers ([Chrome 50 and newer](https://sites.google.com/a/chromium.org/dev/Home/chromium-security/deprecating-powerful-features-on-insecure-origins))

// See `Locate options` for more details.

// @method stopLocate(): this

// Stops watching location previously initiated by `map.locate({watch: true})`

// and aborts resetting the map view if map.locate was called with

// `{setView: true}`.

// @section Location events

// @event locationerror: ErrorEvent

// Fired when geolocation (using the [`locate`](#map-locate) method) failed.

// @event locationfound: LocationEvent

// Fired when geolocation (using the [`locate`](#map-locate) method)

// went successfully.

// TODO Appropriate docs section?

// @section Other Methods

// @method addHandler(name: String, HandlerClass: Function): this

// Adds a new `Handler` to the map, given its name and constructor function.

// @method remove(): this

// Destroys the map and clears all related event listeners.

// throws error in IE6-8

// @event unload: Event

// Fired when the map is destroyed with [remove](#map-remove) method.

// @method createPane(name: String, container?: HTMLElement): HTMLElement

// Creates a new [map pane](#map-pane) with the given name if it doesn't exist already,

// then returns it. The pane is created as a child of `container`, or

// as a child of the main map pane if not set.

// @section Methods for Getting Map State

// Returns the geographical center of the map view

// @method getZoom(): Number

// Returns the current zoom level of the map view

// @method getBounds(): LatLngBounds

// Returns the geographical bounds visible in the current map view

// @method getMinZoom(): Number

// Returns the minimum zoom level of the map (if set in the `minZoom` option of the map or of any layers), or `0` by default.

// @method getMaxZoom(): Number

// Returns the maximum zoom level of the map (if set in the `maxZoom` option of the map or of any layers).

// @method getBoundsZoom(bounds: LatLngBounds, inside?: Boolean, padding?: Point): Number

// Returns the maximum zoom level on which the given bounds fit to the map

// view in its entirety. If `inside` (optional) is set to `true`, the method

// instead returns the minimum zoom level on which the map view fits into

// the given bounds in its entirety.

// (LatLngBounds[, Boolean, Point]) -> Number

// don't jump if within 1% of a snap level

// Returns the current size of the map container (in pixels).

// @method getPixelBounds(): Bounds

// Returns the bounds of the current map view in projected pixel

// coordinates (sometimes useful in layer and overlay implementations).

// TODO: Check semantics - isn't the pixel origin the 0,0 coord relative to

// the map pane? "left point of the map layer" can be confusing, specially

// since there can be negative offsets.

// @method getPixelOrigin(): Point

// Returns the projected pixel coordinates of the top left point of

// the map layer (useful in custom layer and overlay implementations).

// @method getPixelWorldBounds(zoom?: Number): Bounds

// Returns the world's bounds in pixel coordinates for zoom level `zoom`.

// If `zoom` is omitted, the map's current zoom level is used.

// @method getPane(pane: String|HTMLElement): HTMLElement

// Returns a [map pane](#map-pane), given its name or its HTML element (its identity).

// @method getPanes(): Object

// Returns a plain object containing the names of all [panes](#map-pane) as keys and

// the panes as values.

// @method getContainer: HTMLElement

// Returns the HTML element that contains the map.

// @section Conversion Methods

// @method getZoomScale(toZoom: Number, fromZoom: Number): Number

// Returns the scale factor to be applied to a map transition from zoom level

// `fromZoom` to `toZoom`. Used internally to help with zoom animations.

// TODO replace with universal implementation after refactoring projections

// @method getScaleZoom(scale: Number, fromZoom: Number): Number

// Returns the zoom level that the map would end up at, if it is at `fromZoom`

// level and everything is scaled by a factor of `scale`. Inverse of

// [`getZoomScale`](#map-getZoomScale).

// @method project(latlng: LatLng, zoom: Number): Point

// Projects a geographical coordinate `LatLng` according to the projection

// of the map's CRS, then scales it according to `zoom` and the CRS's

// `Transformation`. The result is pixel coordinate relative to

// the CRS origin.

// @method unproject(point: Point, zoom: Number): LatLng

// Inverse of [`project`](#map-project).

// @method layerPointToLatLng(point: Point): LatLng

// Given a pixel coordinate relative to the [origin pixel](#map-getpixelorigin),

// returns the corresponding geographical coordinate (for the current zoom level).

// @method latLngToLayerPoint(latlng: LatLng): Point

// Given a geographical coordinate, returns the corresponding pixel coordinate

// relative to the [origin pixel](#map-getpixelorigin).

// Returns a `LatLng` where `lat` and `lng` has been wrapped according to the

// map's CRS's `wrapLat` and `wrapLng` properties, if they are outside the

// CRS's bounds.

// By default this means longitude is wrapped around the dateline so its

// value is between -180 and +180 degrees.

// Returns a `LatLngBounds` with the same size as the given one, ensuring that

// its center is within the CRS's bounds.

// By default this means the center longitude is wrapped around the dateline so its

// value is between -180 and +180 degrees, and the majority of the bounds

// overlaps the CRS's bounds.

// Returns the distance between two geographical coordinates according to

// the map's CRS. By default this measures distance in meters.

// @method containerPointToLayerPoint(point: Point): Point

// Given a pixel coordinate relative to the map container, returns the corresponding

// pixel coordinate relative to the [origin pixel](#map-getpixelorigin).

// @method layerPointToContainerPoint(point: Point): Point

// returns the corresponding pixel coordinate relative to the map container.

// @method containerPointToLatLng(point: Point): LatLng

// Given a pixel coordinate relative to the map container, returns

// the corresponding geographical coordinate (for the current zoom level).

// @method latLngToContainerPoint(latlng: LatLng): Point

// relative to the map container.

// @method mouseEventToContainerPoint(ev: MouseEvent): Point

// Given a MouseEvent object, returns the pixel coordinate relative to the

// map container where the event took place.

// @method mouseEventToLayerPoint(ev: MouseEvent): Point

// Given a MouseEvent object, returns the pixel coordinate relative to

// the [origin pixel](#map-getpixelorigin) where the event took place.

// @method mouseEventToLatLng(ev: MouseEvent): LatLng

// Given a MouseEvent object, returns geographical coordinate where the

// event took place.

// (MouseEvent)

// map initialization methods

// Panes are DOM elements used to control the ordering of layers on the map. You

// can access panes with [`map.getPane`](#map-getpane) or

// [`map.getPanes`](#map-getpanes) methods. New panes can be created with the

// [`map.createPane`](#map-createpane) method.

// Every map has the following default panes that differ only in zIndex.

// @pane mapPane: HTMLElement = 'auto'

// Pane that contains all other map panes

// @pane tilePane: HTMLElement = 200

// Pane for `GridLayer`s and `TileLayer`s

// @pane overlayPane: HTMLElement = 400

// Pane for vectors (`Path`s, like `Polyline`s and `Polygon`s), `ImageOverlay`s and `VideoOverlay`s

// @pane shadowPane: HTMLElement = 500

// Pane for overlay shadows (e.g. `Marker` shadows)

// @pane markerPane: HTMLElement = 600

// Pane for `Icon`s of `Marker`s

// @pane tooltipPane: HTMLElement = 650

// Pane for `Tooltip`s.

// @pane popupPane: HTMLElement = 700

// Pane for `Popup`s.

// private methods that modify map state

// @event viewreset: Event

// Fired when the map needs to redraw its content (this usually happens

// on map zoom or load). Very useful for creating custom overlays.

// @event load: Event

// Fired when the map is initialized (when its center and zoom are set

// for the first time).

// @event zoomstart: Event

// Fired when the map zoom is about to change (e.g. before zoom animation).

// @event movestart: Event

// Fired when the view of the map starts changing (e.g. user starts dragging the map).

// @event zoom: Event

// Fired repeatedly during any change in zoom level, including zoom

// and fly animations.

// Always fire 'zoom' if pinching because #3530

// @event move: Event

// Fired repeatedly during any movement of the map, including pan and

// fly animations.

// @event zoomend: Event

// Fired when the map has changed, after any animations.

// @event moveend: Event

// Fired when the center of the map stops changing (e.g. user stopped

// dragging the map).

// DOM event handling

// @section Interaction events

// @event click: MouseEvent

// Fired when the user clicks (or taps) the map.

// @event dblclick: MouseEvent

// Fired when the user double-clicks (or double-taps) the map.

// @event mousedown: MouseEvent

// Fired when the user pushes the mouse button on the map.

// @event mouseup: MouseEvent

// Fired when the user releases the mouse button on the map.

// @event mouseover: MouseEvent

// Fired when the mouse enters the map.

// @event mouseout: MouseEvent

// Fired when the mouse leaves the map.

// @event mousemove: MouseEvent

// Fired while the mouse moves over the map.

// @event contextmenu: MouseEvent

// Fired when the user pushes the right mouse button on the map, prevents

// default browser context menu from showing if there are listeners on

// this event. Also fired on mobile when the user holds a single touch

// for a second (also called long press).

// @event keypress: KeyboardEvent

// Fired when the user presses a key from the keyboard that produces a character value while the map is focused.

// @event keydown: KeyboardEvent

// Fired when the user presses a key from the keyboard while the map is focused. Unlike the `keypress` event,

// the `keydown` event is fired for keys that produce a character value and for keys

// that do not produce a character value.

// @event keyup: KeyboardEvent

// Fired when the user releases a key from the keyboard while the map is focused.

// https://bugzilla.mozilla.org/show_bug.cgi?id=1203873 but Webkit also have

// a pixel offset on very high values, see: http://jsfiddle.net/dg6r5hhb/

// Prevent firing click after you just dragged an object.

// prevents outline when clicking on keyboard-focusable element

// Fire a synthetic 'preclick' event which propagates up (mainly for closing popups).

// @event preclick: MouseEvent

// Fired before mouse click on the map (sometimes useful when you

// want something to happen on click before any existing click

// handlers start running).

// Find the layer the event is propagating from and its parents.

// @method whenReady(fn: Function, context?: Object): this

// Runs the given function `fn` when the map gets initialized with

// a view (center and zoom) and at least one layer, or immediately

// if it's already initialized, optionally passing a function context.

// private methods for getting map state

// layer point of the current center

// offset of the specified place to the current center in pixels

// adjust center for view to get inside bounds

// If offset is less than a pixel, ignore.

// This prevents unstable projections from getting into

// an infinite loop of tiny offsets.

// adjust offset for view to get inside bounds

// returns offset needed for pxBounds to get inside maxBounds at a specified zoom

// difference between the new and current centers in pixels

// don't animate too far unless animate: true specified in options

// workaround for case when transform is the same and so transitionend event is not fired

// don't animate if disabled, not supported or zoom difference is too large

// offset is the pixel coords of the zoom origin relative to the current center

// don't animate if the zoom origin isn't within one screen from the current center, unless forced

// remember what center/zoom to set after animation

// @section Other Events

// @event zoomanim: ZoomAnimEvent

// Fired at least once per zoom animation. For continuous zoom, like pinch zooming, fired once per frame during zoom.

// Work around webkit not firing 'transitionend', see https://github.com/Leaflet/Leaflet/issues/3689, 2693

// This anim frame should prevent an obscure iOS webkit tile loading race condition.

/*
   * @class PosAnimation
   * @aka L.PosAnimation
   * @inherits Evented
   * Used internally for panning animations, utilizing CSS3 Transitions for modern browsers and a timer fallback for IE6-9.
   *
   * @example
   * ```js
   * var fx = new L.PosAnimation();
   * fx.run(el, [300, 500], 0.5);
   * ```
   *
   * @constructor L.PosAnimation()
   * Creates a `PosAnimation` object.
   *
   */

// @factory L.map(id: String, options?: Map options)

// Instantiates a map object given the DOM ID of a `<div>` element

// and optionally an object literal with `Map options`.

// @factory L.map(el: HTMLElement, options?: Map options)

// Instantiates a map object given an instance of a `<div>` HTML element

/*
   * @class Control
   * @aka L.Control
   * @inherits Class
   *
   * L.Control is a base class for implementing map controls. Handles positioning.
   * All other controls extend from this class.
   */

// @aka Control options

// @option position: String = 'topright'

// The position of the control (one of the map corners). Possible values are `'topleft'`,

// `'topright'`, `'bottomleft'` or `'bottomright'`

/* @section
     * Classes extending L.Control will inherit the following methods:
     *
     * @method getPosition: string
     * Returns the position of the control.
     */

// @method setPosition(position: string): this

// Sets the position of the control.

// Returns the HTMLElement that contains the control.

// @method addTo(map: Map): this

// Adds the control to the given map.

// @method remove: this

// Removes the control from the map it is currently active on.

// if map exists and event is not a keyboard event

/* @section Extension methods
   * @uninheritable
   *
   * Every control should extend from `L.Control` and (re-)implement the following methods.
   *
   * @method onAdd(map: Map): HTMLElement
   * Should return the container DOM element for the control and add listeners on relevant map events. Called on [`control.addTo(map)`](#control-addTo).
   *
   * @method onRemove(map: Map)
   * Optional method. Should contain all clean up code that removes the listeners previously added in [`onAdd`](#control-onadd). Called on [`control.remove()`](#control-remove).
   */

/* @namespace Map
   * @section Methods for Layers and Controls
   */

// @method addControl(control: Control): this

// Adds the given control to the map

// @method removeControl(control: Control): this

// Removes the given control from the map

/*
   * @class Control.Layers
   * @aka L.Control.Layers
   * @inherits Control
   *
   * The layers control gives users the ability to switch between different base layers and switch overlays on/off (check out the [detailed example](http://leafletjs.com/examples/layers-control/)). Extends `Control`.
   *
   * @example
   *
   * ```js
   * var baseLayers = {
   * 	"Mapbox": mapbox,
   * 	"OpenStreetMap": osm
   * };
   *
   * var overlays = {
   * 	"Marker": marker,
   * 	"Roads": roadsLayer
   * };
   *
   * L.control.layers(baseLayers, overlays).addTo(map);
   * ```
   *
   * The `baseLayers` and `overlays` parameters are object literals with layer names as keys and `Layer` objects as values:
   *
   * ```js
   * {
   *     "<someName1>": layer1,
   *     "<someName2>": layer2
   * }
   * ```
   *
   * The layer names can contain HTML, which allows you to add additional styling to the items:
   *
   * ```js
   * {"<img src='my-layer-icon' /> <span class='my-layer-item'>My Layer</span>": myLayer}
   * ```
   */

// @aka Control.Layers options

// @option collapsed: Boolean = true

// If `true`, the control will be collapsed into an icon and expanded on mouse hover or touch.

// @option autoZIndex: Boolean = true

// If `true`, the control will assign zIndexes in increasing order to all of its layers so that the order is preserved when switching them on/off.

// @option hideSingleBase: Boolean = false

// If `true`, the base layers in the control will be hidden when there is only one.

// @option sortLayers: Boolean = false

// Whether to sort the layers. When `false`, layers will keep the order

// in which they were added to the control.

// @option sortFunction: Function = *

// A [compare function](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)

// that will be used for sorting the layers, when `sortLayers` is `true`.

// The function receives both the `L.Layer` instances and their names, as in

// `sortFunction(layerA, layerB, nameA, nameB)`.

// By default, it sorts layers alphabetically by their name.

// Trigger expand after Layers Control has been inserted into DOM so that is now has an actual height.

// @method addBaseLayer(layer: Layer, name: String): this

// Adds a base layer (radio button entry) with the given name to the control.

// @method addOverlay(layer: Layer, name: String): this

// Adds an overlay (checkbox entry) with the given name to the control.

// @method removeLayer(layer: Layer): this

// Remove the given layer from the control.

// @method expand(): this

// Expand the control container if collapsed.

// @method collapse(): this

// Collapse the control container if expanded.

// makes this work on IE touch devices by stopping it from firing a mouseout event when the touch is released

// Hide base layers section if there's only one layer.

// @namespace Map

// @section Layer events

// @event baselayerchange: LayersControlEvent

// Fired when the base layer is changed through the [layer control](#control-layers).

// @event overlayadd: LayersControlEvent

// Fired when an overlay is selected through the [layer control](#control-layers).

// @event overlayremove: LayersControlEvent

// Fired when an overlay is deselected through the [layer control](#control-layers).

// @namespace Control.Layers

// IE7 bugs out if you create a radio dynamically, so you have to do it this hacky way (see http://bit.ly/PqYLBe)

// Helps from preventing layer control flicker when checkboxes are disabled

// https://github.com/Leaflet/Leaflet/issues/2771

// Bugfix issue 2318: Should remove all old layers before readding new ones

// Backward compatibility, remove me in 1.1.

// @aka Control.Zoom options

// @option zoomInText: String = '+'

// The text set on the 'zoom in' button.

// @option zoomInTitle: String = 'Zoom in'

// The title set on the 'zoom in' button.

// @option zoomOutText: String = '&#x2212;'

// The text set on the 'zoom out' button.

// @option zoomOutTitle: String = 'Zoom out'

// The title set on the 'zoom out' button.

/*
       * Will force screen readers like VoiceOver to read this as "Zoom in - button"
       */

// @factory L.control.layers(baselayers?: Object, overlays?: Object, options?: Control.Layers options)

// Creates a layers control with the given layers. Base layers will be switched with radio buttons, while overlays will be switched with checkboxes. Note that all base layers should be passed in the base layers object, but only one should be added to the map during map instantiation.

// @section Control options

// @option zoomControl: Boolean = true

// Whether a [zoom control](#control-zoom) is added to the map by default.

// @section Controls

// @property zoomControl: Control.Zoom

// The default zoom control (only available if the

// [`zoomControl` option](#map-zoomcontrol) was `true` when creating the map).

// @namespace Control.Zoom

// @factory L.control.zoom(options: Control.Zoom options)

// Creates a zoom control

// @aka Control.Scale options

// @option maxWidth: Number = 100

// Maximum width of the control in pixels. The width is set dynamically to show round values (e.g. 100, 200, 500).

// @option metric: Boolean = True

// Whether to show the metric scale line (m/km).

// @option imperial: Boolean = True

// Whether to show the imperial scale line (mi/ft).

// @aka Control.Attribution options

// @option prefix: String = 'Leaflet'

// The HTML text shown before the attributions. Pass `false` to disable.

// TODO ugly, refactor

// @method setPrefix(prefix: String): this

// Sets the text before the attributions.

// @method addAttribution(text: String): this

// Adds an attribution text (e.g. `'Vector data &copy; Mapbox'`).

// @method removeAttribution(text: String): this

// Removes an attribution text.

/*
   * @class Control.Scale
   * @aka L.Control.Scale
   * @inherits Control
   *
   * A simple scale control that shows the scale of the current center of screen in metric (m/km) and imperial (mi/ft) systems. Extends `Control`.
   *
   * @example
   *
   * ```js
   * L.control.scale().addTo(map);
   * ```
   */

// @option attributionControl: Boolean = true

// Whether a [attribution control](#control-attribution) is added to the map by default.

// @namespace Control.Attribution

// @factory L.control.attribution(options: Control.Attribution options)

// Creates an attribution control.

/*
  	L.Handler is a base class for handler classes that are used internally to inject
  	interaction features like dragging to classes like Map and Marker.
  */

// @class Handler

// @aka L.Handler

// Abstract class for map interaction handlers

// @method enable(): this

// Enables the handler

// @method disable(): this

// Disables the handler

// @method enabled(): Boolean

// Returns `true` if the handler is enabled

// @section Extension methods

// Classes inheriting from `Handler` must implement the two following methods:

// @method addHooks()

// Called when the handler is enabled, should add event hooks.

// @method removeHooks()

// Called when the handler is disabled, should remove the event hooks added previously.

// @section There is static function which can be called without instantiating L.Handler:

// @function addTo(map: Map, name: String): this

// Adds a new Handler to the given map with the given name.

// @aka Draggable options

// @option clickTolerance: Number = 3

// The max number of pixels a user can shift the mouse pointer during a click

// for it to be considered a valid click (as opposed to a mouse drag).

// @constructor L.Draggable(el: HTMLElement, dragHandle?: HTMLElement, preventOutline?: Boolean, options?: Draggable options)

// Creates a `Draggable` object for moving `el` when you start dragging the `dragHandle` element (equals `el` itself by default).

// @method enable()

// Enables the dragging ability

// @method disable()

// Disables the dragging ability

// If we're currently dragging this draggable,

// disabling it counts as first ending the drag.

// Ignore simulated events, since we handle both touch and

// mouse explicitly; otherwise we risk getting duplicates of

// touch events, see #4315.

// Also ignore the event if disabled; this happens in IE11

// under some circumstances, see #3666.

// Prevent dragging multiple objects at once.

// @event down: Event

// Fired when a drag is about to start.

// Cache the scale, so that we can continuously compensate for it during drag (_onMove).

// We assume that the parent container's position, border and scale do not change for the duration of the drag.

// Therefore there is no need to account for the position and border (they are eliminated by the subtraction)

// and we can use the cached value for the scale.

// @event dragstart: Event

// Fired when a drag starts

// IE and Edge do not give the <use> element, so fetch it

// if necessary

// @event predrag: Event

// Fired continuously during dragging *before* each corresponding

// update of the element's position.

// @event drag: Event

// Fired continuously during dragging.

// ensure drag is not fired after dragend

// @event dragend: DragEndEvent

// Fired when the drag ends.

/*
   * @class Draggable
   * @aka L.Draggable
   * @inherits Evented
   *
   * A class for making DOM elements draggable (including touch support).
   * Used internally for map and marker dragging. Only works for elements
   * that were positioned with [`L.DomUtil.setPosition`](#domutil-setposition).
   *
   * @example
   * ```js
   * var draggable = new L.Draggable(elementToDrag);
   * draggable.enable();
   * ```
   */

/*
   * @namespace LineUtil
   *
   * Various utility functions for polyline points processing, used by Leaflet internally to make polylines lightning-fast.
   */

// Simplify polyline with vertex reduction and Douglas-Peucker simplification.

// Improves rendering performance dramatically by lessening the number of points to draw.

// @function simplify(points: Point[], tolerance: Number): Point[]

// Dramatically reduces the number of points in a polyline while retaining

// its shape and returns a new array of simplified points, using the

// [Douglas-Peucker algorithm](http://en.wikipedia.org/wiki/Douglas-Peucker_algorithm).

// Used for a huge performance boost when processing/displaying Leaflet polylines for

// each zoom level and also reducing visual noise. tolerance affects the amount of

// simplification (lesser value means higher quality but slower and with more points).

// Also released as a separated micro-library [Simplify.js](http://mourner.github.com/simplify-js/).

// stage 1: vertex reduction

// stage 2: Douglas-Peucker simplification

// @function pointToSegmentDistance(p: Point, p1: Point, p2: Point): Number

// Returns the distance between point `p` and segment `p1` to `p2`.

// @function closestPointOnSegment(p: Point, p1: Point, p2: Point): Number

// Returns the closest point from a point `p` on a segment `p1` to `p2`.

// Douglas-Peucker simplification, see http://en.wikipedia.org/wiki/Douglas-Peucker_algorithm

// reduce points that are too close to each other to a single point

// @function clipSegment(a: Point, b: Point, bounds: Bounds, useLastCode?: Boolean, round?: Boolean): Point[]|Boolean

// Clips the segment a to b by rectangular bounds with the

// [Cohen-Sutherland algorithm](https://en.wikipedia.org/wiki/Cohen%E2%80%93Sutherland_algorithm)

// (modifying the segment points directly!). Used by Leaflet to only show polyline

// points that are on the screen or near, increasing performance.

// save 2nd code to avoid calculating it on the next segment

// if a,b is inside the clip window (trivial accept)

// if a,b is outside the clip window (trivial reject)

// other cases

// top

// bottom

// right

// left

// square distance (to avoid unnecessary Math.sqrt calls)

// return closest point on segment or distance to that point

// @function isFlat(latlngs: LatLng[]): Boolean

// Returns true if `latlngs` is a flat array, false is nested.

/*
   * @namespace PolyUtil
   * Various utility functions for polygon geometries.
   */

/* @function clipPolygon(points: Point[], bounds: Bounds, round?: Boolean): Point[]
   * Clips the polygon geometry defined by the given `points` by the given bounds (using the [Sutherland-Hodgman algorithm](https://en.wikipedia.org/wiki/Sutherland%E2%80%93Hodgman_algorithm)).
   * Used by Leaflet to only show polygon points that are on the screen or near, increasing
   * performance. Note that polygon points needs different algorithm for clipping
   * than polyline, so there's a separate method for it.
   */

// for each edge (left, bottom, right, top)

// if a is inside the clip window

// if b is outside the clip window (a->b goes out of screen)

// else if b is inside the clip window (a->b enters the screen)

/*
   * @namespace Projection
   * @section
   * Leaflet comes with a set of already defined Projections out of the box:
   *
   * @projection L.Projection.LonLat
   *
   * Equirectangular, or Plate Carree projection — the most simple projection,
   * mostly used by GIS enthusiasts. Directly maps `x` as longitude, and `y` as
   * latitude. Also suitable for flat worlds, e.g. game maps. Used by the
   * `EPSG:4326` and `Simple` CRS.
   */

/*
   * @class Layer
   * @inherits Evented
   * @aka L.Layer
   * @aka ILayer
   *
   * A set of methods from the Layer base class that all Leaflet layers use.
   * Inherits all methods, options and events from `L.Evented`.
   *
   * @example
   *
   * ```js
   * var layer = L.marker(latlng).addTo(map);
   * layer.addTo(map);
   * layer.remove();
   * ```
   *
   * @event add: Event
   * Fired after the layer is added to a map
   *
   * @event remove: Event
   * Fired after the layer is removed from a map
   */

// Classes extending `L.Layer` will inherit the following options:

// @option pane: String = 'overlayPane'

// By default the layer will be added to the map's [overlay pane](#map-overlaypane). Overriding this option will cause the layer to be placed on another pane by default.

// @option attribution: String = null

// String to be shown in the attribution control, e.g. "© OpenStreetMap contributors". It describes the layer data and is often a legal obligation towards copyright holders and tile providers.

/* @section
     * Classes extending `L.Layer` will inherit the following methods:
     *
     * @method addTo(map: Map|LayerGroup): this
     * Adds the layer to the given map or layer group.
     */

// Removes the layer from the map it is currently active on.

// @method removeFrom(map: Map): this

// Removes the layer from the given map

// @method getPane(name? : String): HTMLElement

// Returns the `HTMLElement` representing the named pane on the map. If `name` is omitted, returns the pane for this layer.

// @method getAttribution: String

// Used by the `attribution control`, returns the [attribution option](#gridlayer-attribution).

// check in case layer gets added and then removed before the map is ready

/* @section Extension methods
   * @uninheritable
   *
   * Every layer should extend from `L.Layer` and (re-)implement the following methods.
   *
   * @method onAdd(map: Map): this
   * Should contain code that creates DOM elements for the layer, adds them to `map panes` where they should belong and puts listeners on relevant map events. Called on [`map.addLayer(layer)`](#map-addlayer).
   *
   * @method onRemove(map: Map): this
   * Should contain all clean up code that removes the layer's elements from the DOM and removes listeners previously added in [`onAdd`](#layer-onadd). Called on [`map.removeLayer(layer)`](#map-removelayer).
   *
   * @method getEvents(): Object
   * This optional method should return an object like `{ viewreset: this._reset }` for [`addEventListener`](#evented-addeventlistener). The event handlers in this object will be automatically added and removed from the map with your layer.
   *
   * @method getAttribution(): String
   * This optional method should return a string containing HTML to be shown on the `Attribution control` whenever the layer is visible.
   *
   * @method beforeAdd(map: Map): this
   * Optional method. Called on [`map.addLayer(layer)`](#map-addlayer), before the layer is added to the map, before events are initialized, without waiting until the map is in a usable state. Use for early initialization only.
   */

/* @namespace Map
   * @section Layer events
   *
   * @event layeradd: LayerEvent
   * Fired when a new layer is added to the map.
   *
   * @event layerremove: LayerEvent
   * Fired when some layer is removed from the map
   *
   * @section Methods for Layers and Controls
   */

// @method addLayer(layer: Layer): this

// Adds the given layer to the map

// Removes the given layer from the map.

// @method hasLayer(layer: Layer): Boolean

// Returns `true` if the given layer is currently added to the map

/* @method eachLayer(fn: Function, context?: Object): this
     * Iterates over the layers of the map, optionally specifying context of the iterator function.
     * ```
     * map.eachLayer(function(layer){
     *     layer.bindPopup('Hello');
     * });
     * ```
     */

// @event zoomlevelschange: Event

// Fired when the number of zoomlevels on the map is changed due

// to adding or removing a layer.

/*
   * @class LayerGroup
   * @aka L.LayerGroup
   * @inherits Layer
   *
   * Used to group several layers and handle them as one. If you add it to the map,
   * any layers added or removed from the group will be added/removed on the map as
   * well. Extends `Layer`.
   *
   * @example
   *
   * ```js
   * L.layerGroup([marker1, marker2])
   * 	.addLayer(polyline)
   * 	.addTo(map);
   * ```
   */

// Adds the given layer to the group.

// Removes the given layer from the group.

// @method removeLayer(id: Number): this

// Removes the layer with the given internal ID from the group.

// Returns `true` if the given layer is currently added to the group.

// @method hasLayer(id: Number): Boolean

// Returns `true` if the given internal ID is currently added to the group.

// @method clearLayers(): this

// Removes all the layers from the group.

// @method invoke(methodName: String, …): this

// Calls `methodName` on every layer contained in this group, passing any

// additional parameters. Has no effect if the layers contained do not

// implement `methodName`.

// @method eachLayer(fn: Function, context?: Object): this

// Iterates over the layers of the group, optionally specifying context of the iterator function.

// group.eachLayer(function (layer) {

// 	layer.bindPopup('Hello');

// @method getLayer(id: Number): Layer

// Returns the layer with the given internal ID.

// @method getLayers(): Layer[]

// Returns an array of all the layers added to the group.

// @method setZIndex(zIndex: Number): this

// Calls `setZIndex` on every layer contained in this group, passing the z-index.

// @method getLayerId(layer: Layer): Number

// Returns the internal ID for a layer

// @event layeradd: LayerEvent

// Fired when a layer is added to this `FeatureGroup`

// @event layerremove: LayerEvent

// Fired when a layer is removed from this `FeatureGroup`

// @method setStyle(style: Path options): this

// Sets the given path options to each layer of the group that has a `setStyle` method.

// @method bringToFront(): this

// Brings the layer group to the top of all other layers

// @method bringToBack(): this

// Brings the layer group to the back of all other layers

// Returns the LatLngBounds of the Feature Group (created from bounds and coordinates of its children).

/* @section
     * @aka Icon options
     *
     * @option iconUrl: String = null
     * **(required)** The URL to the icon image (absolute or relative to your script path).
     *
     * @option iconRetinaUrl: String = null
     * The URL to a retina sized version of the icon image (absolute or relative to your
     * script path). Used for Retina screen devices.
     *
     * @option iconSize: Point = null
     * Size of the icon image in pixels.
     *
     * @option iconAnchor: Point = null
     * The coordinates of the "tip" of the icon (relative to its top left corner). The icon
     * will be aligned so that this point is at the marker's geographical location. Centered
     * by default if size is specified, also can be set in CSS with negative margins.
     *
     * @option popupAnchor: Point = [0, 0]
     * The coordinates of the point from which popups will "open", relative to the icon anchor.
     *
     * @option tooltipAnchor: Point = [0, 0]
     * The coordinates of the point from which tooltips will "open", relative to the icon anchor.
     *
     * @option shadowUrl: String = null
     * The URL to the icon shadow image. If not specified, no shadow image will be created.
     *
     * @option shadowRetinaUrl: String = null
     *
     * @option shadowSize: Point = null
     * Size of the shadow image in pixels.
     *
     * @option shadowAnchor: Point = null
     * The coordinates of the "tip" of the shadow (relative to its top left corner) (the same
     * as iconAnchor if not specified).
     *
     * @option className: String = ''
     * A custom class name to assign to both icon and shadow images. Empty by default.
     */

// @method createIcon(oldIcon?: HTMLElement): HTMLElement

// Called internally when the icon has to be shown, returns a `<img>` HTML element

// styled according to the options.

// @method createShadow(oldIcon?: HTMLElement): HTMLElement

// As `createIcon`, but for the shadow beneath it.

// @factory L.layerGroup(layers?: Layer[], options?: Object)

// Create a layer group, optionally given an initial set of layers and an `options` object.

// @factory L.icon(options: Icon options)

// Creates an icon instance with the given options.

/*
   * @miniclass Icon.Default (Icon)
   * @aka L.Icon.Default
   * @section
   *
   * A trivial subclass of `Icon`, represents the icon to use in `Marker`s when
   * no icon is specified. Points to the blue marker image distributed with Leaflet
   * releases.
   *
   * In order to customize the default icon, just change the properties of `L.Icon.Default.prototype.options`
   * (which is a set of `Icon options`).
   *
   * If you want to _completely_ replace the default icon, override the
   * `L.Marker.prototype.options.icon` with your own icon instead.
   */

// Deprecated, backwards-compatibility only

// @option imagePath: String

// `Icon.Default` will try to auto-detect the location of the

// blue icon images. If you are placing these images in a non-standard

// way, set this option to point to the right path.

// IE8

// Compute incremental movement

// @section Dragging events

// Fired when the user starts dragging the marker.

// Fired when the marker starts moving (because of dragging).

// update shadow position

// Fired repeatedly while the user drags the marker.

// Fired when the user stops dragging the marker.

// Fired when the marker stops moving (because of dragging).

// @aka Marker options

// @option icon: Icon = *

// Icon instance to use for rendering the marker.

// See [Icon documentation](#L.Icon) for details on how to customize the marker icon.

// If not specified, a common instance of `L.Icon.Default` is used.

// Option inherited from "Interactive layer" abstract class

// @option keyboard: Boolean = true

// Whether the marker can be tabbed to with a keyboard and clicked by pressing enter.

// @option title: String = ''

// Text for the browser tooltip that appear on marker hover (no tooltip by default).

// @option alt: String = ''

// Text for the `alt` attribute of the icon image (useful for accessibility).

// @option zIndexOffset: Number = 0

// By default, marker images zIndex is set automatically based on its latitude. Use this option if you want to put the marker on top of all others (or below), specifying a high value like `1000` (or high negative value, respectively).

// @option opacity: Number = 1.0

// The opacity of the marker.

// @option riseOnHover: Boolean = false

// If `true`, the marker will get on top of others when you hover the mouse over it.

// @option riseOffset: Number = 250

// The z-index offset used for the `riseOnHover` feature.

// @option pane: String = 'markerPane'

// `Map pane` where the markers icon will be added.

// @option pane: String = 'shadowPane'

// `Map pane` where the markers shadow will be added.

// @option bubblingMouseEvents: Boolean = false

// When `true`, a mouse event on this marker will trigger the same event on the map

// (unless [`L.DomEvent.stopPropagation`](#domevent-stoppropagation) is used).

// @section Draggable marker options

// @option draggable: Boolean = false

// Whether the marker is draggable with mouse/touch or not.

// @option autoPan: Boolean = false

// Whether to pan the map when dragging this marker near its edge or not.

// @option autoPanPadding: Point = Point(50, 50)

// Distance (in pixels to the left/right and to the top/bottom) of the

// map edge to start panning the map.

// @option autoPanSpeed: Number = 10

// Number of pixels the map should pan by.

/* @section
     *
     * In addition to [shared layer methods](#Layer) like `addTo()` and `remove()` and [popup methods](#Popup) like bindPopup() you can also use the following methods:
     */

// @method getLatLng: LatLng

// Returns the current geographical position of the marker.

// @method setLatLng(latlng: LatLng): this

// Changes the marker position to the given point.

// Fired when the marker is moved via [`setLatLng`](#marker-setlatlng) or by [dragging](#marker-dragging). Old and new coordinates are included in event arguments as `oldLatLng`, `latlng`.

// @method setZIndexOffset(offset: Number): this

// Changes the [zIndex offset](#marker-zindexoffset) of the marker.

// @method getIcon: Icon

// Returns the current icon used by the marker

// @method setIcon(icon: Icon): this

// Changes the marker icon.

// if we're not reusing the icon, remove the old one and init new one

// @method setOpacity(opacity: Number): this

// Changes the opacity of the marker.

/*
   * L.Handler.MarkerDrag is used internally by L.Marker to make the markers draggable.
   */

/* @namespace Marker
   * @section Interaction handlers
   *
   * Interaction handlers are properties of a marker instance that allow you to control interaction behavior in runtime, enabling or disabling certain features such as dragging (see `Handler` methods). Example:
   *
   * ```js
   * marker.dragging.disable();
   * ```
   *
   * @property dragging: Handler
   * Marker dragging handler (by both mouse and touch). Only valid when the marker is on the map (Otherwise set [`marker.options.draggable`](#marker-draggable)).
   */

// factory L.marker(latlng: LatLng, options? : Marker options)

// @factory L.marker(latlng: LatLng, options? : Marker options)

// Instantiates a Marker object given a geographical point and optionally an options object.

/*
   * @class Path
   * @aka L.Path
   * @inherits Interactive layer
   *
   * An abstract class that contains options and constants shared between vector
   * overlays (Polygon, Polyline, Circle). Do not use it directly. Extends `Layer`.
   */

// @aka Path options

// @option stroke: Boolean = true

// Whether to draw stroke along the path. Set it to `false` to disable borders on polygons or circles.

// @option color: String = '#3388ff'

// Stroke color

// @option weight: Number = 3

// Stroke width in pixels

// Stroke opacity

// @option lineCap: String= 'round'

// A string that defines [shape to be used at the end](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-linecap) of the stroke.

// @option lineJoin: String = 'round'

// A string that defines [shape to be used at the corners](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-linejoin) of the stroke.

// @option dashArray: String = null

// A string that defines the stroke [dash pattern](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-dasharray). Doesn't work on `Canvas`-powered layers in [some old browsers](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/setLineDash#Browser_compatibility).

// @option dashOffset: String = null

// A string that defines the [distance into the dash pattern to start the dash](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-dashoffset). Doesn't work on `Canvas`-powered layers in [some old browsers](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/setLineDash#Browser_compatibility).

// @option fill: Boolean = depends

// Whether to fill the path with color. Set it to `false` to disable filling on polygons or circles.

// @option fillColor: String = *

// Fill color. Defaults to the value of the [`color`](#path-color) option

// @option fillOpacity: Number = 0.2

// Fill opacity.

// @option fillRule: String = 'evenodd'

// A string that defines [how the inside of a shape](https://developer.mozilla.org/docs/Web/SVG/Attribute/fill-rule) is determined.

// className: '',

// @option bubblingMouseEvents: Boolean = true

// When `true`, a mouse event on this path will trigger the same event on the map

// Renderer is set here because we need to call renderer.getEvents

// before this.getEvents.

// @method redraw(): this

// Redraws the layer. Sometimes useful after you changed the coordinates that the path uses.

// Changes the appearance of a Path based on the options in the `Path options` object.

// Brings the layer to the top of all path layers.

// Brings the layer to the bottom of all path layers.

// defined in child classes

// used when doing hit detection for Canvas layers

// @aka CircleMarker options

// @option radius: Number = 10

// Radius of the circle marker, in pixels

// @method setLatLng(latLng: LatLng): this

// Sets the position of a circle marker to a new location.

// Fired when the marker is moved via [`setLatLng`](#circlemarker-setlatlng). Old and new coordinates are included in event arguments as `oldLatLng`, `latlng`.

// @method getLatLng(): LatLng

// Returns the current geographical position of the circle marker

// @method setRadius(radius: Number): this

// Sets the radius of a circle marker. Units are in pixels.

// @method getRadius(): Number

// Returns the current radius of the circle

// Needed by the `Canvas` renderer for interactivity

/*
   * @class CircleMarker
   * @aka L.CircleMarker
   * @inherits Path
   *
   * A circle of a fixed size with radius specified in pixels. Extends `Path`.
   */

// @factory L.circleMarker(latlng: LatLng, options?: CircleMarker options)

// Instantiates a circle marker object given a geographical point, and an optional options object.

/*
   * @class Circle
   * @aka L.Circle
   * @inherits CircleMarker
   *
   * A class for drawing circle overlays on a map. Extends `CircleMarker`.
   *
   * It's an approximation and starts to diverge from a real circle closer to poles (due to projection distortion).
   *
   * @example
   *
   * ```js
   * L.circle([50.5, 30.5], {radius: 200}).addTo(map);
   * ```
   */

// Backwards compatibility with 0.7.x factory (latlng, radius, options?)

// @aka Circle options

// @option radius: Number; Radius of the circle, in meters.

// Sets the radius of a circle. Units are in meters.

// Returns the current radius of a circle. Units are in meters.

// Returns the `LatLngBounds` of the path.

// Fallback for edge case, #2425

// @factory L.circle(latlng: LatLng, options?: Circle options)

// Instantiates a circle object given a geographical point, and an options object

// which contains the circle radius.

// @factory L.circle(latlng: LatLng, radius: Number, options?: Circle options)

// Obsolete way of instantiating a circle, for compatibility with 0.7.x code.

// Do not use in new applications or plugins.

/*
   * @class Polyline
   * @aka L.Polyline
   * @inherits Path
   *
   * A class for drawing polyline overlays on a map. Extends `Path`.
   *
   * @example
   *
   * ```js
   * // create a red polyline from an array of LatLng points
   * var latlngs = [
   * 	[45.51, -122.68],
   * 	[37.77, -122.43],
   * 	[34.04, -118.2]
   * ];
   *
   * var polyline = L.polyline(latlngs, {color: 'red'}).addTo(map);
   *
   * // zoom the map to the polyline
   * map.fitBounds(polyline.getBounds());
   * ```
   *
   * You can also pass a multi-dimensional array to represent a `MultiPolyline` shape:
   *
   * ```js
   * // create a red polyline from an array of arrays of LatLng points
   * var latlngs = [
   * 	[[45.51, -122.68],
   * 	 [37.77, -122.43],
   * 	 [34.04, -118.2]],
   * 	[[40.78, -73.91],
   * 	 [41.83, -87.62],
   * 	 [32.76, -96.72]]
   * ];
   * ```
   */

// @aka Polyline options

// @option smoothFactor: Number = 1.0

// How much to simplify the polyline on each zoom level. More means

// better performance and smoother look, and less means more accurate representation.

// @option noClip: Boolean = false

// Disable polyline clipping.

// @method getLatLngs(): LatLng[]

// Returns an array of the points in the path, or nested arrays of points in case of multi-polyline.

// @method setLatLngs(latlngs: LatLng[]): this

// Replaces all the points in the polyline with the given array of geographical points.

// @method isEmpty(): Boolean

// Returns `true` if the Polyline has no LatLngs.

// @method closestLayerPoint(p: Point): Point

// Returns the point closest to `p` on the Polyline.

// Returns the center ([centroid](http://en.wikipedia.org/wiki/Centroid)) of the polyline.

// throws error when not yet added to map as this center calculation requires projected coordinates

// polyline centroid algorithm; only uses the first ring if there are multiple

// The line is so small in the current view that all points are on the same pixel.

// @method addLatLng(latlng: LatLng, latlngs? LatLng[]): this

// Adds a given point to the polyline. By default, adds to the first ring of

// the polyline in case of a multi-polyline, but can be overridden by passing

// a specific ring as a LatLng array (that you can earlier access with [`getLatLngs`](#polyline-getlatlngs)).

// recursively convert latlngs input into actual LatLng instances; calculate bounds along the way

// recursively turns latlngs into a set of rings with projected coordinates

// clip polyline by renderer bounds so that we have less to render for performance

// if segment goes out of screen, or it's the last one, it's the end of the line part

// simplify each clipped part of the polyline for performance

// hit detection for polylines

// @factory L.polyline(latlngs: LatLng[], options?: Polyline options)

// Instantiates a polyline object given an array of geographical points and

// optionally an options object. You can create a `Polyline` object with

// multiple separate lines (`MultiPolyline`) by passing an array of arrays

// of geographic points.

// Retrocompat. Allow plugins to support Leaflet versions before and after 1.1.

/*
   * @class Polygon
   * @aka L.Polygon
   * @inherits Polyline
   *
   * A class for drawing polygon overlays on a map. Extends `Polyline`.
   *
   * Note that points you pass when creating a polygon shouldn't have an additional last point equal to the first one — it's better to filter out such points.
   *
   *
   * @example
   *
   * ```js
   * // create a red polygon from an array of LatLng points
   * var latlngs = [[37, -109.05],[41, -109.03],[41, -102.05],[37, -102.04]];
   *
   * var polygon = L.polygon(latlngs, {color: 'red'}).addTo(map);
   *
   * // zoom the map to the polygon
   * map.fitBounds(polygon.getBounds());
   * ```
   *
   * You can also pass an array of arrays of latlngs, with the first array representing the outer shape and the other arrays representing holes in the outer shape:
   *
   * ```js
   * var latlngs = [
   *   [[37, -109.05],[41, -109.03],[41, -102.05],[37, -102.04]], // outer ring
   *   [[37.29, -108.58],[40.71, -108.58],[40.71, -102.50],[37.29, -102.50]] // hole
   * ];
   * ```
   *
   * Additionally, you can pass a multi-dimensional array to represent a MultiPolygon shape.
   *
   * ```js
   * var latlngs = [
   *   [ // first polygon
   *     [[37, -109.05],[41, -109.03],[41, -102.05],[37, -102.04]], // outer ring
   *     [[37.29, -108.58],[40.71, -108.58],[40.71, -102.50],[37.29, -102.50]] // hole
   *   ],
   *   [ // second polygon
   *     [[41, -111.03],[45, -111.04],[45, -104.05],[41, -104.05]]
   *   ]
   * ];
   * ```
   */

// polygon centroid algorithm; only uses the first ring if there are multiple

// Polygon is so small that all points are on same pixel.

// remove last point if it equals first one

// polygons need a different clipping algorithm so we redefine that

// increase clip padding by stroke width to avoid stroke on clip edges

// ray casting algorithm for detecting if point is in polygon

// also check if it's on polygon stroke

// @factory L.polygon(latlngs: LatLng[], options?: Polyline options)

/*
   * @class GeoJSON
   * @aka L.GeoJSON
   * @inherits FeatureGroup
   *
   * Represents a GeoJSON object or an array of GeoJSON objects. Allows you to parse
   * GeoJSON data and display it on the map. Extends `FeatureGroup`.
   *
   * @example
   *
   * ```js
   * L.geoJSON(data, {
   * 	style: function (feature) {
   * 		return {color: feature.properties.color};
   * 	}
   * }).bindPopup(function (layer) {
   * 	return layer.feature.properties.description;
   * }).addTo(map);
   * ```
   */

/* @section
     * @aka GeoJSON options
     *
     * @option pointToLayer: Function = *
     * A `Function` defining how GeoJSON points spawn Leaflet layers. It is internally
     * called when data is added, passing the GeoJSON point feature and its `LatLng`.
     * The default is to spawn a default `Marker`:
     * ```js
     * function(geoJsonPoint, latlng) {
     * 	return L.marker(latlng);
     * }
     * ```
     *
     * @option style: Function = *
     * A `Function` defining the `Path options` for styling GeoJSON lines and polygons,
     * called internally when data is added.
     * The default value is to not override any defaults:
     * ```js
     * function (geoJsonFeature) {
     * 	return {}
     * }
     * ```
     *
     * @option onEachFeature: Function = *
     * A `Function` that will be called once for each created `Feature`, after it has
     * been created and styled. Useful for attaching events and popups to features.
     * The default is to do nothing with the newly created layers:
     * ```js
     * function (feature, layer) {}
     * ```
     *
     * @option filter: Function = *
     * A `Function` that will be used to decide whether to include a feature or not.
     * The default is to include all features:
     * ```js
     * function (geoJsonFeature) {
     * 	return true;
     * }
     * ```
     * Note: dynamically changing the `filter` option will have effect only on newly
     * added data. It will _not_ re-evaluate already included features.
     *
     * @option coordsToLatLng: Function = *
     * A `Function` that will be used for converting GeoJSON coordinates to `LatLng`s.
     * The default is the `coordsToLatLng` static method.
     *
     * @option markersInheritOptions: Boolean = false
     * Whether default Markers for "Point" type Features inherit from group options.
     */

// @method addData( <GeoJSON> data ): this

// Adds a GeoJSON object to the layer.

// only add this if geometry or geometries are set and not null

// @method resetStyle( <Path> layer? ): this

// Resets the given vector layer's style to the original GeoJSON style, useful for resetting style after hover events.

// If `layer` is omitted, the style of all features in the current layer is reset.

// reset any custom styles

// @method setStyle( <Function> style ): this

// Changes styles of GeoJSON vector layers with the given style function.

// There are several static functions which can be called without instantiating L.GeoJSON:

// @function geometryToLayer(featureData: Object, options?: GeoJSON options): Layer

// Creates a `Layer` from a given GeoJSON feature. Can use a custom

// [`pointToLayer`](#geojson-pointtolayer) and/or [`coordsToLatLng`](#geojson-coordstolatlng)

// functions if provided as options.

// @function coordsToLatLng(coords: Array): LatLng

// Creates a `LatLng` object from an array of 2 numbers (longitude, latitude)

// or 3 numbers (longitude, latitude, altitude) used in GeoJSON for points.

// @function coordsToLatLngs(coords: Array, levelsDeep?: Number, coordsToLatLng?: Function): Array

// Creates a multidimensional array of `LatLng`s from a GeoJSON coordinates array.

// `levelsDeep` specifies the nesting level (0 is for an array of points, 1 for an array of arrays of points, etc., 0 by default).

// Can use a custom [`coordsToLatLng`](#geojson-coordstolatlng) function.

// @function latLngToCoords(latlng: LatLng, precision?: Number): Array

// Reverse of [`coordsToLatLng`](#geojson-coordstolatlng)

// @function latLngsToCoords(latlngs: Array, levelsDeep?: Number, closed?: Boolean): Array

// Reverse of [`coordsToLatLngs`](#geojson-coordstolatlngs)

// `closed` determines whether the first point should be appended to the end of the array to close the feature, only used when `levelsDeep` is 0. False by default.

// @function asFeature(geojson: Object): Object

// Normalize GeoJSON geometries/features into GeoJSON features.

// @namespace Marker

// @section Other methods

// @method toGeoJSON(precision?: Number): Object

// `precision` is the number of decimal places for coordinates.

// The default value is 6 places.

// Returns a [`GeoJSON`](http://en.wikipedia.org/wiki/GeoJSON) representation of the marker (as a GeoJSON `Point` Feature).

// @namespace GeoJSON

// @factory L.geoJSON(geojson?: Object, options?: GeoJSON options)

// Creates a GeoJSON layer. Optionally accepts an object in

// [GeoJSON format](https://tools.ietf.org/html/rfc7946) to display on the map

// (you can alternatively add it later with `addData` method) and an `options` object.

// Backward compatibility.

// @namespace CircleMarker

// Returns a [`GeoJSON`](http://en.wikipedia.org/wiki/GeoJSON) representation of the circle marker (as a GeoJSON `Point` Feature).

// @namespace Polyline

// Returns a [`GeoJSON`](http://en.wikipedia.org/wiki/GeoJSON) representation of the polyline (as a GeoJSON `LineString` or `MultiLineString` Feature).

// @namespace Polygon

// Returns a [`GeoJSON`](http://en.wikipedia.org/wiki/GeoJSON) representation of the polygon (as a GeoJSON `Polygon` or `MultiPolygon` Feature).

// @namespace LayerGroup

// Returns a [`GeoJSON`](http://en.wikipedia.org/wiki/GeoJSON) representation of the layer group (as a GeoJSON `FeatureCollection`, `GeometryCollection`, or `MultiPoint`).

// Squash nested feature collections

// @aka ImageOverlay options

// The opacity of the image overlay.

// Text for the `alt` attribute of the image (useful for accessibility).

// @option interactive: Boolean = false

// If `true`, the image overlay will emit [mouse events](#interactive-layer) when clicked or hovered.

// @option crossOrigin: Boolean|String = false

// Whether the crossOrigin attribute will be added to the image.

// If a String is provided, the image will have its crossOrigin attribute set to the String provided. This is needed if you want to access image pixel data.

// Refer to [CORS Settings](https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes) for valid String values.

// @option errorOverlayUrl: String = ''

// URL to the overlay image to show in place of the overlay that failed to load.

// @option zIndex: Number = 1

// The explicit [zIndex](https://developer.mozilla.org/docs/Web/CSS/CSS_Positioning/Understanding_z_index) of the overlay layer.

// @option className: String = ''

// A custom class name to assign to the image. Empty by default.

// (String, LatLngBounds, Object)

// Sets the opacity of the overlay.

// Brings the layer to the top of all overlays.

// Brings the layer to the bottom of all overlays.

// @method setUrl(url: String): this

// Changes the URL of the image.

// @method setBounds(bounds: LatLngBounds): this

// Update the bounds that this ImageOverlay covers

// @method setZIndex(value: Number): this

// Changes the [zIndex](#imageoverlay-zindex) of the image overlay.

// Get the bounds that this ImageOverlay covers

// @method getElement(): HTMLElement

// Returns the instance of [`HTMLImageElement`](https://developer.mozilla.org/docs/Web/API/HTMLImageElement)

// used by this overlay.

// Fired when the ImageOverlay layer has loaded its image

// @event error: Event

// Fired when the ImageOverlay layer fails to load its image

// @aka VideoOverlay options

// @option autoplay: Boolean = true

// Whether the video starts playing automatically when loaded.

// @option loop: Boolean = true

// Whether the video will loop back to the beginning when played.

// @option keepAspectRatio: Boolean = true

// Whether the video will save aspect ratio after the projection.

// Relevant for supported browsers. Browser compatibility- https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit

// Fired when the video has finished loading the first frame

// @method getElement(): HTMLVideoElement

// Returns the instance of [`HTMLVideoElement`](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement)

/*
   * @class ImageOverlay
   * @aka L.ImageOverlay
   * @inherits Interactive layer
   *
   * Used to load and display a single image over specific bounds of the map. Extends `Layer`.
   *
   * @example
   *
   * ```js
   * var imageUrl = 'http://www.lib.utexas.edu/maps/historical/newark_nj_1922.jpg',
   * 	imageBounds = [[40.712216, -74.22655], [40.773941, -74.12544]];
   * L.imageOverlay(imageUrl, imageBounds).addTo(map);
   * ```
   */

// @factory L.videoOverlay(video: String|Array|HTMLVideoElement, bounds: LatLngBounds, options?: VideoOverlay options)

// Instantiates an image overlay object given the URL of the video (or array of URLs, or even a video element) and the

// geographical bounds it is tied to.

/*
   * @class SVGOverlay
   * @aka L.SVGOverlay
   * @inherits ImageOverlay
   *
   * Used to load, display and provide DOM access to an SVG file over specific bounds of the map. Extends `ImageOverlay`.
   *
   * An SVG overlay uses the [`<svg>`](https://developer.mozilla.org/docs/Web/SVG/Element/svg) element.
   *
   * @example
   *
   * ```js
   * var svgElement = document.createElementNS("http://www.w3.org/2000/svg", "svg");
   * svgElement.setAttribute('xmlns', "http://www.w3.org/2000/svg");
   * svgElement.setAttribute('viewBox', "0 0 200 200");
   * svgElement.innerHTML = '<rect width="200" height="200"/><rect x="75" y="23" width="50" height="50" style="fill:red"/><rect x="75" y="123" width="50" height="50" style="fill:#0013ff"/>';
   * var svgElementBounds = [ [ 32, -130 ], [ 13, -100 ] ];
   * L.svgOverlay(svgElement, svgElementBounds).addTo(map);
   * ```
   */

// @method getElement(): SVGElement

// Returns the instance of [`SVGElement`](https://developer.mozilla.org/docs/Web/API/SVGElement)

// @factory L.svgOverlay(svg: String|SVGElement, bounds: LatLngBounds, options?: SVGOverlay options)

// Instantiates an image overlay object given an SVG element and the geographical bounds it is tied to.

// A viewBox attribute is required on the SVG element to zoom in and out properly.

/*
   * @class DivOverlay
   * @inherits Layer
   * @aka L.DivOverlay
   * Base model for L.Popup and L.Tooltip. Inherit from it for custom popup like plugins.
   */

// @namespace DivOverlay

// @aka DivOverlay options

// @option offset: Point = Point(0, 7)

// The offset of the popup position. Useful to control the anchor

// of the popup when opening it on some overlays.

// A custom CSS class name to assign to the popup.

// @option pane: String = 'popupPane'

// `Map pane` where the popup will be added.

// @namespace Popup

// Returns the geographical point of popup.

// Sets the geographical point where the popup will open.

// @method getContent: String|HTMLElement

// Returns the content of the popup.

// @method setContent(htmlContent: String|HTMLElement|Function): this

// Sets the HTML content of the popup. If a function is passed the source layer will be passed to the function. The function should return a `String` or `HTMLElement` to be used in the popup.

// @method getElement: String|HTMLElement

// Alias for [getContent()](#popup-getcontent)

// @method update: null

// Updates the popup content, layout and position. Useful for updating the popup after something inside changed, e.g. image loaded.

// @method isOpen: Boolean

// Returns `true` when the popup is visible on the map.

// @method bringToFront: this

// Brings this popup in front of other popups (in the same map pane).

// @method bringToBack: this

// Brings this popup to the back of other popups (in the same map pane).

// set overlay source to this layer

// update the overlay (content, layout, ect...)

// bottom position the popup in case the height of the popup changes (images loading etc)

// @aka Popup options

// @option maxWidth: Number = 300

// Max width of the popup, in pixels.

// @option minWidth: Number = 50

// Min width of the popup, in pixels.

// @option maxHeight: Number = null

// If set, creates a scrollable container of the given height

// inside a popup if its content exceeds it.

// @option autoPan: Boolean = true

// Set it to `false` if you don't want the map to do panning animation

// to fit the opened popup.

// @option autoPanPaddingTopLeft: Point = null

// The margin between the popup and the top left corner of the map

// view after autopanning was performed.

// @option autoPanPaddingBottomRight: Point = null

// The margin between the popup and the bottom right corner of the map

// @option autoPanPadding: Point = Point(5, 5)

// Equivalent of setting both top left and bottom right autopan padding to the same value.

// @option keepInView: Boolean = false

// Set it to `true` if you want to prevent users from panning the popup

// off of the screen while it is open.

// @option closeButton: Boolean = true

// Controls the presence of a close button in the popup.

// @option autoClose: Boolean = true

// Set it to `false` if you want to override the default behavior of

// the popup closing when another popup is opened.

// @option closeOnEscapeKey: Boolean = true

// the ESC key for closing of the popup.

// @option closeOnClick: Boolean = *

// Set it if you want to override the default behavior of the popup closing when user clicks

// on the map. Defaults to the map's [`closePopupOnClick`](#map-closepopuponclick) option.

// @method openOn(map: Map): this

// Adds the popup to the map and closes the previous one. The same as `map.openPopup(popup)`.

// @section Popup events

// @event popupopen: PopupEvent

// Fired when a popup is opened in the map

// @namespace Layer

// Fired when a popup bound to this layer is opened

// For non-path layers, we toggle the popup when clicking

// again the layer, so prevent the map to reopen it.

// @event popupclose: PopupEvent

// Fired when a popup in the map is closed

// Fired when a popup bound to this layer is closed

// @event autopanstart: Event

// Fired when the map starts autopanning when opening a popup.

// Where should we anchor the popup on the source layer?

/*
   * @class Popup
   * @inherits DivOverlay
   * @aka L.Popup
   * Used to open popups in certain places of the map. Use [Map.openPopup](#map-openpopup) to
   * open popups while making sure that only one popup is open at one time
   * (recommended for usability), or use [Map.addLayer](#map-addlayer) to open as many as you want.
   *
   * @example
   *
   * If you want to just bind a popup to marker click and then open it, it's really easy:
   *
   * ```js
   * marker.bindPopup(popupContent).openPopup();
   * ```
   * Path overlays like polylines also have a `bindPopup` method.
   * Here's a more complicated way to open a popup on a map:
   *
   * ```js
   * var popup = L.popup()
   * 	.setLatLng(latlng)
   * 	.setContent('<p>Hello world!<br />This is a nice popup.</p>')
   * 	.openOn(map);
   * ```
   */

/* @namespace Map
   * @section Interaction Options
   * @option closePopupOnClick: Boolean = true
   * Set it to `false` if you don't want popups to close when user clicks the map.
   */

// @section Methods for Layers and Controls

// @method openPopup(popup: Popup): this

// Opens the specified popup while closing the previously opened (to make sure only one is opened at one time for usability).

// @method openPopup(content: String|HTMLElement, latlng: LatLng, options?: Popup options): this

// Creates a popup with the specified content and options and opens it in the given point on a map.

// @method closePopup(popup?: Popup): this

// Closes the popup previously opened with [openPopup](#map-openpopup) (or the given one).

/*
   * @namespace Layer
   * @section Popup methods example
   *
   * All layers share a set of methods convenient for binding popups to it.
   *
   * ```js
   * var layer = L.Polygon(latlngs).bindPopup('Hi There!').addTo(map);
   * layer.openPopup();
   * layer.closePopup();
   * ```
   *
   * Popups will also be automatically opened when the layer is clicked on and closed when the layer is removed from the map or another popup is opened.
   */

// @section Popup methods

// @method bindPopup(content: String|HTMLElement|Function|Popup, options?: Popup options): this

// Binds a popup to the layer with the passed `content` and sets up the

// necessary event listeners. If a `Function` is passed it will receive

// the layer as the first argument and should return a `String` or `HTMLElement`.

// @method unbindPopup(): this

// Removes the popup previously bound with `bindPopup`.

// @method openPopup(latlng?: LatLng): this

// Opens the bound popup at the specified `latlng` or at the default popup anchor if no `latlng` is passed.

// open the popup on the map

// @method closePopup(): this

// Closes the popup bound to this layer if it is open.

// @method togglePopup(): this

// Opens or closes the popup bound to this layer depending on its current state.

// @method isPopupOpen(): boolean

// Returns `true` if the popup bound to this layer is currently open.

// @method setPopupContent(content: String|HTMLElement|Popup): this

// Sets the content of the popup bound to this layer.

// @method getPopup(): Popup

// Returns the popup bound to this layer.

// prevent map click

// if this inherits from Path its a vector and we can just

// open the popup at the new location

// otherwise treat it like a marker and figure out

// if we should toggle it open/closed

/*
   * @class Tooltip
   * @inherits DivOverlay
   * @aka L.Tooltip
   * Used to display small texts on top of map layers.
   *
   * @example
   *
   * ```js
   * marker.bindTooltip("my tooltip text").openTooltip();
   * ```
   * Note about tooltip offset. Leaflet takes two options in consideration
   * for computing tooltip offsetting:
   * - the `offset` Tooltip option: it defaults to [0, 0], and it's specific to one tooltip.
   *   Add a positive x offset to move the tooltip to the right, and a positive y offset to
   *   move it to the bottom. Negatives will move to the left and top.
   * - the `tooltipAnchor` Icon option: this will only be considered for Marker. You
   *   should adapt this value if you use a custom icon.
   */

// @namespace Tooltip

// @aka Tooltip options

// @option pane: String = 'tooltipPane'

// `Map pane` where the tooltip will be added.

// @option offset: Point = Point(0, 0)

// Optional offset of the tooltip position.

// @option direction: String = 'auto'

// Direction where to open the tooltip. Possible values are: `right`, `left`,

// `top`, `bottom`, `center`, `auto`.

// `auto` will dynamically switch between `right` and `left` according to the tooltip

// position on the map.

// @option permanent: Boolean = false

// Whether to open the tooltip permanently or only on mouseover.

// @option sticky: Boolean = false

// If true, the tooltip will follow the mouse instead of being fixed at the feature center.

// If true, the tooltip will listen to the feature events.

// @option opacity: Number = 0.9

// Tooltip container opacity.

// @section Tooltip events

// @event tooltipopen: TooltipEvent

// Fired when a tooltip is opened in the map.

// Fired when a tooltip bound to this layer is opened.

// @event tooltipclose: TooltipEvent

// Fired when a tooltip in the map is closed.

// Fired when a tooltip bound to this layer is closed.

// Where should we anchor the tooltip on the source layer?

// @factory L.tooltip(options?: Tooltip options, source?: Layer)

// Instantiates a Tooltip object given an optional `options` object that describes its appearance and location and an optional `source` object that is used to tag the tooltip with a reference to the Layer to which it refers.

// @method openTooltip(tooltip: Tooltip): this

// Opens the specified tooltip.

// @method openTooltip(content: String|HTMLElement, latlng: LatLng, options?: Tooltip options): this

// Creates a tooltip with the specified content and options and open it.

// @method closeTooltip(tooltip?: Tooltip): this

// Closes the tooltip given as parameter.

/*
   * @namespace Layer
   * @section Tooltip methods example
   *
   * All layers share a set of methods convenient for binding tooltips to it.
   *
   * ```js
   * var layer = L.Polygon(latlngs).bindTooltip('Hi There!').addTo(map);
   * layer.openTooltip();
   * layer.closeTooltip();
   * ```
   */

// @section Tooltip methods

// @method bindTooltip(content: String|HTMLElement|Function|Tooltip, options?: Tooltip options): this

// Binds a tooltip to the layer with the passed `content` and sets up the

// @method unbindTooltip(): this

// Removes the tooltip previously bound with `bindTooltip`.

// @method openTooltip(latlng?: LatLng): this

// Opens the bound tooltip at the specified `latlng` or at the default tooltip anchor if no `latlng` is passed.

// open the tooltip on the map

// Tooltip container may not be defined if not permanent and never

// opened.

// @method closeTooltip(): this

// Closes the tooltip bound to this layer if it is open.

// @method toggleTooltip(): this

// Opens or closes the tooltip bound to this layer depending on its current state.

// @method isTooltipOpen(): boolean

// Returns `true` if the tooltip bound to this layer is currently open.

// @method setTooltipContent(content: String|HTMLElement|Tooltip): this

// Sets the content of the tooltip bound to this layer.

// @method getTooltip(): Tooltip

// Returns the tooltip bound to this layer.

/*
   * @class DivIcon
   * @aka L.DivIcon
   * @inherits Icon
   *
   * Represents a lightweight icon for markers that uses a simple `<div>`
   * element instead of an image. Inherits from `Icon` but ignores the `iconUrl` and shadow options.
   *
   * @example
   * ```js
   * var myIcon = L.divIcon({className: 'my-div-icon'});
   * // you can set .my-div-icon styles in CSS
   *
   * L.marker([50.505, 30.57], {icon: myIcon}).addTo(map);
   * ```
   *
   * By default, it has a 'leaflet-div-icon' CSS class and is styled as a little white square with a shadow.
   */

// @aka DivIcon options

// also can be set through CSS

// iconAnchor: (Point),

// popupAnchor: (Point),

// @option html: String|HTMLElement = ''

// Custom HTML code to put inside the div element, empty by default. Alternatively,

// an instance of `HTMLElement`.

// @option bgPos: Point = [0, 0]

// Optional relative position of the background, in pixels

// @factory L.divIcon(options: DivIcon options)

// Creates a `DivIcon` instance with the given options.

/*
   * @class GridLayer
   * @inherits Layer
   * @aka L.GridLayer
   *
   * Generic class for handling a tiled grid of HTML elements. This is the base class for all tile layers and replaces `TileLayer.Canvas`.
   * GridLayer can be extended to create a tiled grid of HTML elements like `<canvas>`, `<img>` or `<div>`. GridLayer will handle creating and animating these DOM elements for you.
   *
   *
   * @section Synchronous usage
   * @example
   *
   * To create a custom layer, extend GridLayer and implement the `createTile()` method, which will be passed a `Point` object with the `x`, `y`, and `z` (zoom level) coordinates to draw your tile.
   *
   * ```js
   * var CanvasLayer = L.GridLayer.extend({
   *     createTile: function(coords){
   *         // create a <canvas> element for drawing
   *         var tile = L.DomUtil.create('canvas', 'leaflet-tile');
   *
   *         // setup tile width and height according to the options
   *         var size = this.getTileSize();
   *         tile.width = size.x;
   *         tile.height = size.y;
   *
   *         // get a canvas context and draw something on it using coords.x, coords.y and coords.z
   *         var ctx = tile.getContext('2d');
   *
   *         // return the tile so it can be rendered on screen
   *         return tile;
   *     }
   * });
   * ```
   *
   * @section Asynchronous usage
   * @example
   *
   * Tile creation can also be asynchronous, this is useful when using a third-party drawing library. Once the tile is finished drawing it can be passed to the `done()` callback.
   *
   * ```js
   * var CanvasLayer = L.GridLayer.extend({
   *     createTile: function(coords, done){
   *         var error;
   *
   *         // create a <canvas> element for drawing
   *         var tile = L.DomUtil.create('canvas', 'leaflet-tile');
   *
   *         // setup tile width and height according to the options
   *         var size = this.getTileSize();
   *         tile.width = size.x;
   *         tile.height = size.y;
   *
   *         // draw something asynchronously and pass the tile to the done() callback
   *         setTimeout(function() {
   *             done(error, tile);
   *         }, 1000);
   *
   *         return tile;
   *     }
   * });
   * ```
   *
   * @section
   */

// @aka GridLayer options

// @option tileSize: Number|Point = 256

// Width and height of tiles in the grid. Use a number if width and height are equal, or `L.point(width, height)` otherwise.

// Opacity of the tiles. Can be used in the `createTile()` function.

// @option updateWhenIdle: Boolean = (depends)

// Load new tiles only when panning ends.

// `true` by default on mobile browsers, in order to avoid too many requests and keep smooth navigation.

// `false` otherwise in order to display new tiles _during_ panning, since it is easy to pan outside the

// [`keepBuffer`](#gridlayer-keepbuffer) option in desktop browsers.

// @option updateWhenZooming: Boolean = true

// By default, a smooth zoom animation (during a [touch zoom](#map-touchzoom) or a [`flyTo()`](#map-flyto)) will update grid layers every integer zoom level. Setting this option to `false` will update the grid layer only when the smooth animation ends.

// @option updateInterval: Number = 200

// Tiles will not update more than once every `updateInterval` milliseconds when panning.

// The explicit zIndex of the tile layer.

// @option bounds: LatLngBounds = undefined

// If set, tiles will only be loaded inside the set `LatLngBounds`.

// @option minZoom: Number = 0

// The minimum zoom level down to which this layer will be displayed (inclusive).

// @option maxZoom: Number = undefined

// The maximum zoom level up to which this layer will be displayed (inclusive).

// @option maxNativeZoom: Number = undefined

// Maximum zoom number the tile source has available. If it is specified,

// the tiles on all zoom levels higher than `maxNativeZoom` will be loaded

// from `maxNativeZoom` level and auto-scaled.

// @option minNativeZoom: Number = undefined

// Minimum zoom number the tile source has available. If it is specified,

// the tiles on all zoom levels lower than `minNativeZoom` will be loaded

// from `minNativeZoom` level and auto-scaled.

// @option noWrap: Boolean = false

// Whether the layer is wrapped around the antimeridian. If `true`, the

// GridLayer will only be displayed once at low zoom levels. Has no

// effect when the [map CRS](#map-crs) doesn't wrap around. Can be used

// in combination with [`bounds`](#gridlayer-bounds) to prevent requesting

// tiles outside the CRS limits.

// @option pane: String = 'tilePane'

// `Map pane` where the grid layer will be added.

// A custom class name to assign to the tile layer. Empty by default.

// @option keepBuffer: Number = 2

// When panning the map, keep this many rows and columns of tiles before unloading them.

// Brings the tile layer to the top of all tile layers.

// Brings the tile layer to the bottom of all tile layers.

// Returns the HTML element that contains the tiles for this layer.

// Changes the [opacity](#gridlayer-opacity) of the grid layer.

// Changes the [zIndex](#gridlayer-zindex) of the grid layer.

// @method isLoading: Boolean

// Returns `true` if any tile in the grid layer has not finished loading.

// @method redraw: this

// Causes the layer to clear all the tiles and request them again.

// update tiles on move, but not more often than once per given interval

// Layers extending `GridLayer` shall reimplement the following method.

// @method createTile(coords: Object, done?: Function): HTMLElement

// Called only internally, must be overridden by classes extending `GridLayer`.

// Returns the `HTMLElement` corresponding to the given `coords`. If the `done` callback

// is specified, it must be called when the tile has finished loading and drawing.

// @method getTileSize: Point

// Normalizes the [tileSize option](#gridlayer-tilesize) into a point. Used by the `createTile()` method.

// go through all other layers of the same pane, set zIndex to max + 1 (front) or min - 1 (back)

// -Infinity for max, Infinity for min

// IE doesn't inherit filter opacity properly, so we're forced to set it on tiles

// force the browser to consider the newly added element for transition

// Flag to prevent _updateOpacity from pruning tiles during

// a zoom anim or a pinch gesture

// Private method to load tiles in the grid's active zoom level according to map bounds

// if out of minzoom/maxzoom

// Sanity check: panic if the tile range contains Infinity somewhere.

// _update just loads more tiles. If the tile zoom level differs too much

// from the map's, let _setView reset levels and prune old tiles.

// create a queue of coordinates to load tiles from

// sort tile queue to load tiles in order of their distance to center

// if it's the first batch of tiles to load

// @event loading: Event

// Fired when the grid layer starts loading tiles.

// create DOM fragment to append tiles in one batch

// don't load tile if it's out of bounds and not wrapped

// don't load tile if it doesn't intersect the bounds in options

// converts tile coordinates to its geographical bounds

// converts tile coordinates to key for the tile cache

// converts tile cache key to coordinates

// @event tileunload: TileEvent

// Fired when a tile is removed (e.g. when a tile goes off the screen).

// update opacity on tiles in IE7-8 because of filter inheritance problems

// without this hack, tiles disappear after zoom on Chrome for Android

// https://github.com/Leaflet/Leaflet/issues/2078

// if createTile is defined with a second argument ("done" callback),

// we know that tile is async and will be ready later; otherwise

// mark tile as ready, but delay one frame for opacity animation to happen

// save tile in cache

// @event tileloadstart: TileEvent

// Fired when a tile is requested and starts loading.

// @event tileerror: TileErrorEvent

// Fired when there is an error loading a tile.

// @event tileload: TileEvent

// Fired when a tile loads.

// Fired when the grid layer loaded all visible tiles.

// Wait a bit more than 0.2 secs (the duration of the tile fade-in)

// to trigger a pruning.

// @factory L.gridLayer(options?: GridLayer options)

// Creates a new instance of GridLayer with the supplied options.

/*
   * @class TileLayer
   * @inherits GridLayer
   * @aka L.TileLayer
   * Used to load and display tile layers on the map. Note that most tile servers require attribution, which you can set under `Layer`. Extends `GridLayer`.
   *
   * @example
   *
   * ```js
   * L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png?{foo}', {foo: 'bar', attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>'}).addTo(map);
   * ```
   *
   * @section URL template
   * @example
   *
   * A string of the following form:
   *
   * ```
   * 'http://{s}.somedomain.com/blabla/{z}/{x}/{y}{r}.png'
   * ```
   *
   * `{s}` means one of the available subdomains (used sequentially to help with browser parallel requests per domain limitation; subdomain values are specified in options; `a`, `b` or `c` by default, can be omitted), `{z}` — zoom level, `{x}` and `{y}` — tile coordinates. `{r}` can be used to add "&commat;2x" to the URL to load retina tiles.
   *
   * You can use custom keys in the template, which will be [evaluated](#util-template) from TileLayer options, like this:
   *
   * ```
   * L.tileLayer('http://{s}.somedomain.com/{foo}/{z}/{x}/{y}.png', {foo: 'bar'});
   * ```
   */

// @aka TileLayer options

// @option maxZoom: Number = 18

// @option subdomains: String|String[] = 'abc'

// Subdomains of the tile service. Can be passed in the form of one string (where each letter is a subdomain name) or an array of strings.

// @option errorTileUrl: String = ''

// URL to the tile image to show in place of the tile that failed to load.

// @option zoomOffset: Number = 0

// The zoom number used in tile URLs will be offset with this value.

// @option tms: Boolean = false

// If `true`, inverses Y axis numbering for tiles (turn this on for [TMS](https://en.wikipedia.org/wiki/Tile_Map_Service) services).

// @option zoomReverse: Boolean = false

// If set to true, the zoom number used in tile URLs will be reversed (`maxZoom - zoom` instead of `zoom`)

// @option detectRetina: Boolean = false

// If `true` and user is on a retina display, it will request four tiles of half the specified size and a bigger zoom level in place of one to utilize the high resolution.

// Whether the crossOrigin attribute will be added to the tiles.

// If a String is provided, all tiles will have their crossOrigin attribute set to the String provided. This is needed if you want to access tile pixel data.

// detecting retina displays, adjusting tileSize and zoom levels

// for https://github.com/Leaflet/Leaflet/issues/137

// @method setUrl(url: String, noRedraw?: Boolean): this

// Updates the layer's URL template and redraws it (unless `noRedraw` is set to `true`).

// If the URL does not change, the layer will not be redrawn unless

// the noRedraw parameter is set to false.

// Called only internally, overrides GridLayer's [`createTile()`](#gridlayer-createtile)

// to return an `<img>` HTML element with the appropriate image URL given `coords`. The `done`

// callback is called when the tile has been loaded.

/*
       Alt tag is set to empty string to keep screen readers from reading URL and for compliance reasons
       http://www.w3.org/TR/WCAG20-TECHS/H67
      */

/*
       Set role="presentation" to force screen readers to ignore this
       https://www.w3.org/TR/wai-aria/roles#textalternativecomputation
      */

// Layers extending `TileLayer` might reimplement the following method.

// @method getTileUrl(coords: Object): String

// Called only internally, returns the URL for a tile given its coordinates.

// Classes extending `TileLayer` can override this function to provide custom tile URL naming schemes.

// For https://github.com/Leaflet/Leaflet/issues/3332

// stops loading all tiles in the background layer

// Cancels any pending http requests associated with the tile

// unless we're on Android's stock browser,

// see https://github.com/Leaflet/Leaflet/issues/137

// @factory L.tilelayer(urlTemplate: String, options?: TileLayer options)

// Instantiates a tile layer object given a `URL template` and optionally an options object.

/*
   * @class TileLayer.WMS
   * @inherits TileLayer
   * @aka L.TileLayer.WMS
   * Used to display [WMS](https://en.wikipedia.org/wiki/Web_Map_Service) services as tile layers on the map. Extends `TileLayer`.
   *
   * @example
   *
   * ```js
   * var nexrad = L.tileLayer.wms("http://mesonet.agron.iastate.edu/cgi-bin/wms/nexrad/n0r.cgi", {
   * 	layers: 'nexrad-n0r-900913',
   * 	format: 'image/png',
   * 	transparent: true,
   * 	attribution: "Weather data © 2012 IEM Nexrad"
   * });
   * ```
   */

// @aka TileLayer.WMS options

// If any custom options not documented here are used, they will be sent to the

// WMS server as extra parameters in each request URL. This can be useful for

// [non-standard vendor WMS parameters](http://docs.geoserver.org/stable/en/user/services/wms/vendor.html).

// @option layers: String = ''

// **(required)** Comma-separated list of WMS layers to show.

// @option styles: String = ''

// Comma-separated list of WMS styles.

// @option format: String = 'image/jpeg'

// WMS image format (use `'image/png'` for layers with transparency).

// @option transparent: Boolean = false

// If `true`, the WMS service will return images with transparency.

// @option version: String = '1.1.1'

// Version of the WMS service to use

// @option crs: CRS = null

// Coordinate Reference System to use for the WMS requests, defaults to

// map CRS. Don't change this if you're not sure what it means.

// @option uppercase: Boolean = false

// If `true`, WMS request parameter keys will be uppercase.

// all keys that are not TileLayer options go to WMS params

// @method setParams(params: Object, noRedraw?: Boolean): this

// Merges an object with the new parameters and re-requests tiles on the current screen (unless `noRedraw` was set to true).

// @factory L.tileLayer.wms(baseUrl: String, options: TileLayer.WMS options)

// Instantiates a WMS tile layer object given a base URL of the WMS service and a WMS parameters/options object.

/*
   * @class Renderer
   * @inherits Layer
   * @aka L.Renderer
   *
   * Base class for vector renderer implementations (`SVG`, `Canvas`). Handles the
   * DOM container of the renderer, its bounds, and its zoom animation.
   *
   * A `Renderer` works as an implicit layer group for all `Path`s - the renderer
   * itself can be added or removed to the map. All paths use a renderer, which can
   * be implicit (the map will decide the type of renderer and use it automatically)
   * or explicit (using the [`renderer`](#path-renderer) option of the path).
   *
   * Do not use this class directly, use `SVG` and `Canvas` instead.
   *
   * @event update: Event
   * Fired when the renderer updates its bounds, center and zoom, for example when
   * its map has moved
   */

// @aka Renderer options

// @option padding: Number = 0.1

// How much to extend the clip area around the map view (relative to its size)

// e.g. 0.1 would be 10% of map view in each direction

// @option tolerance: Number = 0

// How much to extend click tolerance round a path/object on the map

// defined by renderer implementations

// Update pixel bounds of renderer container (for positioning/sizing/clipping later)

// Subclasses are responsible of firing the 'update' event.

// Set a flag so that a viewprereset+moveend+viewreset only updates&redraws once

// Redraw vectors since canvas is cleared upon removal,

// in case of removing the renderer itself from the map.

// set canvas size (also clearing it); use double size on retina

// translate so we use the same path coordinates after canvas element moves

// Tell paths to redraw themselves

// Redraw the union of the layer's old pixel

// bounds and the new pixel bounds.

// The redraw will extend the redraw bounds

// with the new pixel bounds.

// Ignore dash array containing invalid lengths

// clear layers in redraw bounds

// draw layers

// Restore state before clipping.

// TODO optimization: 1 fill/stroke for all features with equal style instead of 1 for each feature

// Canvas obviously doesn't have mouse events for individual drawn objects,

// so we emulate that by calculating what's under the mouse on mousemove/click manually

// if we're leaving the layer, fire mouseout

// change cursor

// Already last

// Update first entry unless this is the

// single entry

// Already first

// Update last entry unless this is the

/*
   * @class Canvas
   * @inherits Renderer
   * @aka L.Canvas
   *
   * Allows vector layers to be displayed with [`<canvas>`](https://developer.mozilla.org/docs/Web/API/Canvas_API).
   * Inherits `Renderer`.
   *
   * Due to [technical limitations](http://caniuse.com/#search=canvas), Canvas is not
   * available in all web browsers, notably IE8, and overlapping geometries might
   * not display properly in some edge cases.
   *
   * @example
   *
   * Use Canvas by default for all paths in the map:
   *
   * ```js
   * var map = L.map('map', {
   * 	renderer: L.canvas()
   * });
   * ```
   *
   * Use a Canvas renderer with extra padding for specific vector geometries:
   *
   * ```js
   * var map = L.map('map');
   * var myRenderer = L.canvas({ padding: 0.5 });
   * var line = L.polyline( coordinates, { renderer: myRenderer } );
   * var circle = L.circle( center, { renderer: myRenderer } );
   * ```
   */

// @factory L.canvas(options?: Renderer options)

// Creates a Canvas renderer with the given options.

/*
   * Thanks to Dmitry Baranovsky and his Raphael library for inspiration!
   */

// makes it possible to click through svg root; we'll reset it back in individual paths

// Drag-then-pinch interactions might mess up the center and zoom.

// In this case, the easiest way to prevent this is re-do the renderer

//   bounds and padding when the zooming starts.

// set size of svg-container if changed

// movement: update container viewBox so that we don't have to change coordinates of individual layers

// methods below are called by vector layers implementations

// @namespace Path

// @option className: String = null

// Custom class name set on an element. Only for SVG renderer.

// drawing a circle with two half-arcs

// SVG does not have the concept of zIndex so we resort to changing the DOM order of elements

/*
   * @class SVG
   *
   *
   * VML was deprecated in 2012, which means VML functionality exists only for backwards compatibility
   * with old versions of Internet Explorer.
   */

// mixin to redefine some SVG methods to handle VML syntax which is similar but with some differences

// @namespace SVG

// @factory L.svg(options?: Renderer options)

// Creates a SVG renderer with the given options.

// @namespace Map; @method getRenderer(layer: Path): Renderer

// Returns the instance of `Renderer` that should be used to render the given

// `Path`. It will ensure that the `renderer` options of the map and paths

// are respected, and that the renderers do exist on the map.

// @namespace Path; @option renderer: Renderer

// Use this specific instance of `Renderer` for this path. Takes

// precedence over the map's [default renderer](#map-renderer).

// @namespace Map; @option preferCanvas: Boolean = false

// Whether `Path`s should be rendered on a `Canvas` renderer.

// By default, all `Path`s are rendered in a `SVG` renderer.

/*
   * L.Rectangle extends Polygon and creates a rectangle when passed a LatLngBounds object.
   */

/*
   * @class Rectangle
   * @aka L.Rectangle
   * @inherits Polygon
   *
   * A class for drawing rectangle overlays on a map. Extends `Polygon`.
   *
   * @example
   *
   * ```js
   * // define rectangle geographical bounds
   * var bounds = [[54.559322, -5.767822], [56.1210604, -3.021240]];
   *
   * // create an orange rectangle
   * L.rectangle(bounds, {color: "#ff7800", weight: 1}).addTo(map);
   *
   * // zoom the map to the rectangle bounds
   * map.fitBounds(bounds);
   * ```
   *
   */

// @method setBounds(latLngBounds: LatLngBounds): this

// Redraws the rectangle with the passed bounds.

// @factory L.rectangle(latLngBounds: LatLngBounds, options?: Polyline options)

/*
   * L.Handler.BoxZoom is used to add shift-drag zoom interaction to the map
   * (zoom to a selected bounding box), enabled by default.
   */

// @option boxZoom: Boolean = true

// Whether the map can be zoomed to a rectangular area specified by

// dragging the mouse while pressing the shift key.

// Clear the deferred resetState if it hasn't executed yet, otherwise it

// will interrupt the interaction and orphan a box element in the container.

// Postpone to next JS tick so internal click event handling

// still see it as "moved".

// @section Handlers

// @property boxZoom: Handler

// Box (shift-drag with mouse) zoom handler.

/*
   * L.Handler.DoubleClickZoom is used to handle double-click zoom on the map, enabled by default.
   */

// @option doubleClickZoom: Boolean|String = true

// Whether the map can be zoomed in by double clicking on it and

// zoomed out by double clicking while holding shift. If passed

// `'center'`, double-click zoom will zoom to the center of the

//  view regardless of where the mouse was.

// Map properties include interaction handlers that allow you to control

// interaction behavior in runtime, enabling or disabling certain features such

// as dragging or touch zoom (see `Handler` methods). For example:

// map.doubleClickZoom.disable();

// @property doubleClickZoom: Handler

// Double click zoom handler.

/*
   * L.Handler.MapDrag is used to make the map draggable (with panning inertia), enabled by default.
   */

// @option dragging: Boolean = true

// Whether the map be draggable with mouse/touch or not.

// @section Panning Inertia Options

// @option inertia: Boolean = *

// If enabled, panning of the map will have an inertia effect where

// the map builds momentum while dragging and continues moving in

// the same direction for some time. Feels especially nice on touch

// devices. Enabled by default unless running on old Android devices.

// @option inertiaDeceleration: Number = 3000

// The rate with which the inertial movement slows down, in pixels/second².

// px/s^2

// @option inertiaMaxSpeed: Number = Infinity

// Max speed of the inertial movement, in pixels/second.

// px/s

// @option easeLinearity: Number = 0.2

// TODO refactor, move to CRS

// @option worldCopyJump: Boolean = false

// With this option enabled, the map tracks when you pan to another "copy"

// of the world and seamlessly jumps to the original one so that all overlays

// like markers and vector layers are still visible.

// @option maxBoundsViscosity: Number = 0.0

// If `maxBounds` is set, this option will control how solid the bounds

// are when dragging the map around. The default value of `0.0` allows the

// user to drag outside the bounds at normal speed, higher values will

// slow down map dragging outside bounds, and `1.0` makes the bounds fully

// solid, preventing the user from dragging outside the bounds.

// TODO refactor to be able to adjust map pane position after zoom

// @property dragging: Handler

// Map dragging handler (by both mouse and touch).

/*
   * L.Map.Keyboard is handling keyboard interaction with the map, enabled by default.
   */

// @section Keyboard Navigation Options

// Makes the map focusable and allows users to navigate the map with keyboard

// arrows and `+`/`-` keys.

// @option keyboardPanDelta: Number = 80

// Amount of pixels to pan when pressing an arrow key.

// make the container focusable by tabbing

// @property keyboard: Handler

// Keyboard navigation handler.

/*
   * L.Handler.ScrollWheelZoom is used by L.Map to enable mouse scroll wheel zoom on the map.
   */

// @section Mousewheel options

// @option scrollWheelZoom: Boolean|String = true

// Whether the map can be zoomed by using the mouse wheel. If passed `'center'`,

// it will zoom to the center of the view regardless of where the mouse was.

// @option wheelDebounceTime: Number = 40

// Limits the rate at which a wheel can fire (in milliseconds). By default

// user can't zoom via wheel more often than once per 40 ms.

// @option wheelPxPerZoomLevel: Number = 60

// How many scroll pixels (as reported by [L.DomEvent.getWheelDelta](#domevent-getwheeldelta))

// mean a change of one full zoom level. Smaller values will make wheel-zooming

// faster (and vice versa).

// stop panning and fly animations if any

// map the delta with a sigmoid function to -4..4 range leaning on -1..1

// @property scrollWheelZoom: Handler

// Scroll wheel zoom handler.

/*
   * L.Map.Tap is used to enable mobile hacks like quick taps and long hold.
   */

// @section Touch interaction options

// @option tap: Boolean = true

// Enables mobile hacks for supporting instant taps (fixing 200ms click

// delay on iOS/Android) and touch holds (fired as `contextmenu` events).

// @option tapTolerance: Number = 15

// The max number of pixels a user can shift his finger during touch

// for it to be considered a valid tap.

// don't simulate click or track longpress if more than 1 touch

// if touching a link, highlight it

// simulate long hold but setting a timeout

// simulate click if the touch didn't move too much

// @property tap: Handler

// Mobile touch hacks (quick tap and touch hold) handler.

/*
   * L.Handler.TouchZoom is used by L.Map to add pinch zoom on supported mobile browsers.
   */

// @option touchZoom: Boolean|String = *

// Whether the map can be zoomed by touch-dragging with two fingers. If

// passed `'center'`, it will zoom to the center of the view regardless of

// where the touch events (fingers) were. Enabled for touch-capable web

// browsers except for old Androids.

// @option bounceAtZoomLimits: Boolean = true

// Set it to false if you don't want the map to zoom beyond min/max zoom

// and then bounce back when pinch-zooming.

// Get delta from pinch to center, so centerLatLng is delta applied to initial pinchLatLng

// Pinch updates GridLayers' levels only when zoomSnap is off, so zoomSnap becomes noUpdate.

// @property touchZoom: Handler

// Touch zoom handler.

// Always export us to window global (see #2364)

/* unused harmony export BrowserRouter */

/* unused harmony export HashRouter */

/* harmony export (binding) */

/* unused harmony export NavLink */

/* harmony import */

/**
 * The public API for a <Router> that uses window.location.hash.
 */

// onClick prevented default

// ignore everything but left clicks

// React 15 compat

/**
 * The public API for rendering a history-aware <a>.
 */

/**
 * A <Link> wrapper that knows if it's "active" or not.
 */

// 19.1.2.9 Object.getPrototypeOf(O)

// const timer = timeout && setTimeout(reject, timeout)

// if load doesn't return a promise, it must call resolveImport

// itself. Most common is the promise implementation below.

// makes tests way smaller to run both kinds

// $FlowIssue

/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */

// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)

// 7.3.20 SpeciesConstructor(O, defaultConstructor)

// WebKit Array.of isn't generic

// 22.1.2.3 Array.of( ...items)

// cross-realm fallback

// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap

// https://rwaldron.github.io/proposal-math-extensions/

// eslint-disable-next-line no-undef

/* , mapfn, thisArg */

/* , end */

/* , start, end */

// eslint-disable-line no-unused-vars

/* , fromIndex */

/* , initialValue */

/* , offset */

/* noop */

// eslint-disable-next-line max-statements

// eslint-disable-line no-new

// `ws` module bug, temporarily remove validation length for Uint8Array

// https://github.com/websockets/ws/pull/645

// IEEE754 conversions based on https://github.com/feross/ieee754

// eslint-disable-next-line no-self-compare

// iOS Safari 7.x bug

/* , littleEndian */

// https://github.com/tc39/proposal-string-pad-start-end

/* , fillString = ' ' */

// http://jfbastien.github.io/papers/Math.signbit.html

// EXTERNAL MODULE: ./node_modules/redux-saga/es/internal/utils.js

// EXTERNAL MODULE: ./node_modules/redux-saga/es/internal/channel.js

// prettier-ignore

/**
  Used to track a parent task and its forks
  In the new fork model, forked tasks are attached by default to their parent
  We model this using the concept of Parent task && main Task
  main task is the main flow of the current Generator, the parent tasks is the
  aggregation of the main tasks + all its forked tasks.
  Thus the whole model represents an execution tree with multiple branches (vs the
  linear execution tree in sequential (non parallel) programming)

  A parent tasks has the following semantics
  - It completes if all its forks either complete or all cancelled
  - If it's cancelled, all forks are cancelled as well
  - It aborts if any uncaught error bubbles up from forks
  - If it completes, the return value is the one returned by the main task
**/

/**
    Tracks the current effect cancellation
    Each time the generator progresses. calling runEffect will set a new value
    on it. It allows propagating cancellation to child effects
  **/

/**
    Creates a new task descriptor for this generator, We'll also create a main task
    to track the main flow (besides other forked tasks)
  **/

/**
    cancellation of the main task. We'll simply resume the Generator with a Cancel
  **/

/**
    This may be called by a parent generator to trigger/propagate cancellation
    cancel all pending tasks (including the main task), then end the current task.
     Cancellation propagates down to the whole execution tree holded by this Parent task
    It's also propagated to all joiners of this task and their execution tree/joiners
     Cancellation is noop for terminated/Cancelled tasks tasks
  **/

/**
      We need to check both Running and Cancelled status
      Tasks can be Cancelled but still Running
    **/

/**
        Ending with a Never result will propagate the Cancellation to all joiners
      **/

/**
    attaches cancellation logic to this task's continuation
    this will permit cancellation to propagate down the call chain
  **/

// then return the task descriptor to the caller

// tracks the running status

// kicks up the generator

/**
    This is the generator driver
    It's a recursive async/continuation function which calls itself
    until the generator terminates or throws
  **/

// Preventive measure. If we end up here, then there is really something wrong

/**
          getting TASK_CANCEL automatically cancels the main task
          We can get this value here
           - By cancelling the parent task manually
          - By joining a Cancelled task
        **/

/**
          Cancels the current effect; this will propagate the cancellation down to any called tasks
        **/

/**
          This Generator has ended, terminate the main task and notify the fork queue
        **/

/**
      completion callback and cancel callback are mutually exclusive
      We can't cancel an already completed effect
      And We can't complete an already cancelled effectId
    **/

// Completion callback passed to the appropriate effect runner

// defensive measure

// tracks down the current cancel

// setup cancellation logic on the parent cb

// prevents cancelling an already completed effect

/**
        propagates cancel downward
        catch uncaught cancellations errors; since we can no longer call the completion
        callback, log errors raised during cancellations into the console
      **/

/**
      each effect runner must attach its own logic of cancellation to the provided callback
      it allows this generator to propagate cancellation downward.
       ATTENTION! effect runners must setup the cancel logic by setting cb.cancel = [cancelMethod]
      And the setup must occur before calling the callback
       This is a sort of inversion of control: called async functions are responsible
      for completing the flow by calling the provided continuation; while caller functions
      are responsible for aborting the current flow by calling the attached cancel function
       Library users can attach their own cancellation logic to promises by defining a
      promise[CANCEL] method in their returned promises
      ATTENTION! calling cancel must have no effect on an already completed or cancelled effect
    **/

// Non declarative effect

/**
      Schedule the put in case another saga is holding a lock.
      The put will be executed atomically. ie nested puts will execute after
      this put has terminated.
    **/

// If we have a channel or `put.resolve` was used then bubble up the error.

// Race Auto cancellation

// prevents unnecessary cancellation

// catch synchronous failures; see #152

// CPS (ie node style functions) can define their own cancellation logic

// by setting cancel field on the cb

/* anything else returned as is */

// catch synchronous failures; see #152 and #441

// i.e. a generator function returns an iterator

// do not bubble up synchronous failures for detached forks

// instead create a failed task. See #152 and #441

// Fork effects are non cancellables

// CONCATENATED MODULE: ./node_modules/redux-saga/es/internal/runSaga.js

// EXTERNAL MODULE: ./node_modules/redux-saga/es/internal/sagaHelpers/index.js + 4 modules

// CONCATENATED MODULE: ./node_modules/redux-saga/es/internal/middleware.js

// monitors are expected to have a certain interface, let's fill-in any missing ones

// hit reducers

// EXTERNAL MODULE: ./node_modules/redux-saga/es/effects.js

// 20.1.2.4 Number.isNaN(number)

// 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])

// Try to use displayName of wrapped component

// Expose canUseDOM so tests can monkeypatch it

// B.2.3.11 String.prototype.small()

/**
 * Copyright (c) 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
 * additional grant of patent rights can be found in the PATENTS file in
 * the same directory.
 */

// If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.

// The ._invoke method unifies the implementations of the .next,

// .throw, and .return methods.

// Be forgiving, per 25.3.3.3.3 of the spec:

// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume

// Call delegate.iterator[context.method](context.arg) and handle the

// result, either by returning a { value, done } result from the

// delegate iterator, or by modifying context.method and context.arg,

// setting context.delegate to null, and returning the ContinueSentinel.

// A .throw or .return when the delegate iterator has no .throw

// method always terminates the yield* loop.

// If the delegate iterator has a return method, give it a

// chance to clean up.

// If maybeInvokeDelegate(context) changed context.method from

// "return" to "throw", let that override the TypeError below.

// Re-yield the result returned by the delegate method.

// The delegate iterator is finished, so forget it and continue with

// the outer generator.

// Assign the result of the finished delegate to the temporary

// variable specified by delegate.resultName (see delegateYield).

// Resume execution at the desired location (see delegateYield).

// If context.method was "throw" but the delegate handled the

// exception, let the outer generator proceed normally. If

// context.method was "next", forget context.arg since it has been

// "consumed" by the delegate iterator. If context.method was

// "return", allow the original .return call to continue in the

// outer generator.

// Define Generator.prototype.{next,throw,return} in terms of the

// unified ._invoke helper method.

// Setting context._sent for legacy support of Babel's

// function.sent implementation.

// If an exception is thrown from innerFn, we leave state ===

// GenStateExecuting and loop back for another invocation.

// Dispatch the exception by looping back around to the

// context.dispatchException(context.arg) call above.

// Try/catch helper to minimize deoptimizations. Returns a completion

// record like context.tryEntries[i].completion. This interface could

// have been (and was previously) designed to take a closure to be

// invoked without arguments, but in all the cases we care about we

// already have an existing method we want to call, so there's no need

// to create a new function object. We can even get away with assuming

// the method takes exactly one argument, since that happens to be true

// in every case, so we don't have to touch the arguments object. The

// only additional allocation required is the completion record, which

// has a stable shape and so hopefully should be cheap to allocate.

// Dummy constructor functions that we use as the .constructor and

// .constructor.prototype properties for functions that return Generator

// objects. For full spec compliance, you may wish to configure your

// minifier not to mangle the names of these two functions.

// This is a polyfill for %IteratorPrototype% for environments that

// don't natively support it.

// Helper for defining the .next, .throw, and .return methods of the

// Iterator interface in terms of a single ._invoke method.

// When a yielded Promise is resolved, its final value becomes

// the .value of the Promise<{value,done}> result for the

// current iteration. If the Promise is rejected, however, the

// result for this iteration will be rejected with the same

// reason. Note that rejections of yielded Promises are not

// thrown back into the generator function, as is the case

// when an awaited Promise is rejected. This difference in

// behavior between yield and await is important, because it

// allows the consumer to decide what to do with the yielded

// rejection (swallow it and continue, manually .throw it back

// into the generator, abandon iteration, whatever). With

// await, by contrast, there is no opportunity to examine the

// rejection reason outside the generator function, so the

// only option is to throw it from the await expression, and

// let the generator function handle the exception.

// Define the unified helper method that is used to implement .next,

// .throw, and .return (see defineIteratorMethods).

// If enqueue has been called before, then we want to wait until

// all previous Promises have been resolved before calling invoke,

// so that results are always delivered in the correct order. If

// enqueue has not been called before, then it is important to

// call invoke immediately, without waiting on a callback to fire,

// so that the async generator function has the opportunity to do

// any necessary setup in a predictable way. This predictability

// is why the Promise constructor synchronously invokes its

// executor callback, and why async functions synchronously

// execute code before the first await. Since we implement simple

// async functions in terms of async generators, it is especially

// important to get this right, even though it requires care.

// Avoid propagating failures to Promises returned by later

// invocations of the iterator.

// The root entry object (effectively a try statement without a catch

// or a finally block) gives us a place to store values thrown from

// locations where there is no enclosing try statement.

// Return an iterator with no values.

// If regeneratorRuntime is defined globally and we're in a module,

// make the exports object identical to regeneratorRuntime.

// Define the runtime globally (as expected by generated code) as either

// module.exports (if we're in a module) or a new, empty object.

// This environment has a native %IteratorPrototype%; use it instead

// of the polyfill.

// For the native GeneratorFunction constructor, the best we can

// do is to check its .name property.

// Within the body of any async function, `await x` is transformed to

// `yield regeneratorRuntime.awrap(x)`, so that the runtime can test

// `hasOwn.call(value, "__await")` to determine if the yielded value is

// meant to be awaited.

// Note that simple async functions are implemented on top of

// AsyncIterator objects; they just return a Promise for the value of

// the final result produced by the iterator.

// A Generator should always return itself as the iterator object when the

// @@iterator function is called on it. Some browsers' implementations of the

// iterator prototype chain incorrectly implement this, causing the Generator

// object to not be returned from this call. This ensures that doesn't happen.

// See https://github.com/facebook/regenerator/issues/274 for more details.

// Rather than returning an object with a next method, we keep

// things simple and return the next function itself.

// To avoid creating an additional object, we just hang the .value

// and .done properties off the next function object itself. This

// also ensures that the minifier will not anonymize the function.

// Resetting context._sent for legacy support of Babel's

// Not sure about the optimal order of these conditions:

// If the dispatched exception was caught by a catch block,

// then let that catch block handle the exception normally.

// Exception thrown outside of any try block that could handle

// it, so set the completion value of the entire function to

// throw the exception.

// Ignore the finally entry if control is not jumping to a

// location outside the try/catch block.

// The context.catch method must only be called with a location

// argument that corresponds to a known catch block.

// Deliberately forget the last sent value so that we don't

// accidentally pass it on to the delegate.

// Among the various tricks for obtaining a reference to the global

// object, this seems to be the most reliable technique that does not

// use indirect eval (which violates Content Security Policy).

/* , ...args */

// eslint-disable-next-line no-new-func

// shim for using process in browser

// cached from whatever global is present so that test runners that stub it

// don't break things.  But we need to wrap it in a try catch in case it is

// wrapped in strict mode code which doesn't define any globals.  It's inside a

// function because try/catches deoptimize in certain engines.

//normal enviroments in sane situations

// if setTimeout wasn't available but was latter defined

// when when somebody has screwed with setTimeout but no I.E. maddness

// When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally

// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error

// if clearTimeout wasn't available but was latter defined

// When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally

// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.

// Some versions of I.E. have different rules for clearTimeout vs setTimeout

// v8 likes predictible objects

// empty string to avoid regexp issues

/**
 * Expose `pathToRegexp`.
 */

/**
 * Compile a string to a template function for the path.
 *
 * @param  {string}             str
 * @param  {Object=}            options
 * @return {!function(Object=, Object=)}
 */

/**
 * Prettier encoding of URI path segments.
 *
 * @param  {string}
 * @return {string}
 */

/**
 * The main path matching regexp utility.
 *
 * @type {RegExp}
 */

// Match escaped characters that would otherwise appear in future matches.

// This allows the user to escape special characters that won't transform.

// Match Express-style parameters and un-named parameters with a prefix

// and optional suffixes. Matches appear as:

// "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]

// "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]

// "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]

/**
 * Parse a string for the raw tokens.
 *
 * @param  {string}  str
 * @param  {Object=} options
 * @return {!Array}
 */

// Ignore already escaped sequences.

// Push the current path onto the tokens.

// Match any characters still remaining.

// If the path exists, push it onto the end.

/**
 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
 *
 * @param  {string}
 * @return {string}
 */

/**
 * Expose a method for transforming tokens into the path function.
 */

// Compile all the patterns before compilation.

// Compile all the tokens into regexps.

// Prepend partial segment prefixes.

/**
 * Escape a regular expression string.
 *
 * @param  {string} str
 * @return {string}
 */

/**
 * Escape the capturing group by escaping special characters and meaning.
 *
 * @param  {string} group
 * @return {string}
 */

/**
 * Attach the keys as a property of the regexp.
 *
 * @param  {!RegExp} re
 * @param  {Array}   keys
 * @return {!RegExp}
 */

/**
 * Get the flags for a regexp from the options.
 *
 * @param  {Object} options
 * @return {string}
 */

/**
 * Pull out keys from a regexp.
 *
 * @param  {!RegExp} path
 * @param  {!Array}  keys
 * @return {!RegExp}
 */

/**
 * Expose a function for taking tokens and returning a RegExp.
 *
 * @param  {!Array}          tokens
 * @param  {(Array|Object)=} keys
 * @param  {Object=}         options
 * @return {!RegExp}
 */

/** @type {!Object} */

// Iterate over the tokens and create our regexp string.

// In non-strict mode we allow a slash at the end of match. If the path to

// match already ends with a slash, we remove it for consistency. The slash

// is valid at the end of a path match, not in the middle. This is important

// in non-ending mode, where "/test/" shouldn't match "/test//route".

/**
 * Normalize the given path string, returning a regular expression.
 *
 * An empty array can be passed in for the keys, which will hold the
 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
 *
 * @param  {(string|RegExp|Array)} path
 * @param  {(Array|Object)=}       keys
 * @param  {Object=}               options
 * @return {!RegExp}
 */

// Use a negative lookahead to match only capturing groups.

/**
 * Transform an array into a regexp.
 *
 * @param  {!Array}  path
 * @param  {Array}   keys
 * @param  {!Object} options
 * @return {!RegExp}
 */

/** @type {!Array} */

/**
 * Create a path regexp from string input.
 *
 * @param  {string}  path
 * @param  {!Array}  keys
 * @param  {!Object} options
 * @return {!RegExp}
 */

/** @type {string} */

// 19.1.3.1 Object.assign(target, source)

/* unused harmony export INVALID_BUFFER */

/* unused harmony export UNDEFINED_INPUT_ERROR */

/* unused harmony export channel */

// TODO: check if some new state should be forbidden now

/**
    should be if(typeof matcher !== undefined) instead?
    see PR #273 for a background discussion
  **/

// 23.1 Map Objects

// 23.1.3.6 Map.prototype.get(key)

// 23.1.3.9 Map.prototype.set(key, value)

// 20.2.2.18 Math.imul(x, y)

// some WebKit versions fails with big numbers, some has wrong arity

// 21.1.3.18 String.prototype.startsWith(searchString [, position ])

/* , position = 0 */

// 26.1.9 Reflect.has(target, propertyKey)

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */

// V8 ~ Android 4.3-

// `AdvanceStringIndex` abstract operation

// https://tc39.github.io/ecma262/#sec-advancestringindex

/* unused harmony export __DO_NOT_USE__ActionTypes */

/* unused harmony export combineReducers */

/**
 * These are private action types reserved by Redux.
 * For any unknown actions, you must return the current state.
 * If the current state is undefined, you must return the initial state.
 * Do not reference these action types directly in your code.
 */

/**
 * Creates a Redux store that holds the state tree.
 * The only way to change the data in the store is to call `dispatch()` on it.
 *
 * There should only be a single store in your app. To specify how different
 * parts of the state tree respond to actions, you may combine several reducers
 * into a single reducer function by using `combineReducers`.
 *
 * @param {Function} reducer A function that returns the next state tree, given
 * the current state tree and the action to handle.
 *
 * @param {any} [preloadedState] The initial state. You may optionally specify it
 * to hydrate the state from the server in universal apps, or to restore a
 * previously serialized user session.
 * If you use `combineReducers` to produce the root reducer function, this must be
 * an object with the same shape as `combineReducers` keys.
 *
 * @param {Function} [enhancer] The store enhancer. You may optionally specify it
 * to enhance the store with third-party capabilities such as middleware,
 * time travel, persistence, etc. The only store enhancer that ships with Redux
 * is `applyMiddleware()`.
 *
 * @returns {Store} A Redux store that lets you read the state, dispatch actions
 * and subscribe to changes.
 */

/**
   * This makes a shallow copy of currentListeners so we can use
   * nextListeners as a temporary list while dispatching.
   *
   * This prevents any bugs around consumers calling
   * subscribe/unsubscribe in the middle of a dispatch.
   */

/**
   * Reads the state tree managed by the store.
   *
   * @returns {any} The current state tree of your application.
   */

/**
   * Adds a change listener. It will be called any time an action is dispatched,
   * and some part of the state tree may potentially have changed. You may then
   * call `getState()` to read the current state tree inside the callback.
   *
   * You may call `dispatch()` from a change listener, with the following
   * caveats:
   *
   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
   * If you subscribe or unsubscribe while the listeners are being invoked, this
   * will not have any effect on the `dispatch()` that is currently in progress.
   * However, the next `dispatch()` call, whether nested or not, will use a more
   * recent snapshot of the subscription list.
   *
   * 2. The listener should not expect to see all state changes, as the state
   * might have been updated multiple times during a nested `dispatch()` before
   * the listener is called. It is, however, guaranteed that all subscribers
   * registered before the `dispatch()` started will be called with the latest
   * state by the time it exits.
   *
   * @param {Function} listener A callback to be invoked on every dispatch.
   * @returns {Function} A function to remove this change listener.
   */

/**
   * Dispatches an action. It is the only way to trigger a state change.
   *
   * The `reducer` function, used to create the store, will be called with the
   * current state tree and the given `action`. Its return value will
   * be considered the **next** state of the tree, and the change listeners
   * will be notified.
   *
   * The base implementation only supports plain object actions. If you want to
   * dispatch a Promise, an Observable, a thunk, or something else, you need to
   * wrap your store creating function into the corresponding middleware. For
   * example, see the documentation for the `redux-thunk` package. Even the
   * middleware will eventually dispatch plain object actions using this method.
   *
   * @param {Object} action A plain object representing “what changed”. It is
   * a good idea to keep actions serializable so you can record and replay user
   * sessions, or use the time travelling `redux-devtools`. An action must have
   * a `type` property which may not be `undefined`. It is a good idea to use
   * string constants for action types.
   *
   * @returns {Object} For convenience, the same action object you dispatched.
   *
   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
   * return something else (for example, a Promise you can await).
   */

/**
   * Replaces the reducer currently used by the store to calculate the state.
   *
   * You might need this if your app implements code splitting and you want to
   * load some of the reducers dynamically. You might also need this if you
   * implement a hot reloading mechanism for Redux.
   *
   * @param {Function} nextReducer The reducer for the store to use instead.
   * @returns {void}
   */

// When a store is created, an "INIT" action is dispatched so that every

// reducer returns their initial state. This effectively populates

// the initial state tree.

// This action has a similiar effect to ActionTypes.INIT.

// Any reducers that existed in both the new and old rootReducer

// will receive the previous state. This effectively populates

// the new state tree with any relevant data from the old one.

/**
   * Interoperability point for observable/reactive libraries.
   * @returns {observable} A minimal observable of state changes.
   * For more information, see the observable proposal:
   * https://github.com/tc39/proposal-observable
   */

/**
       * The minimal observable subscription method.
       * @param {Object} observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns {subscription} An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */

/**
 * Prints a warning in the console if it exists.
 *
 * @param {String} message The warning message.
 * @returns {void}
 */

/**
 * Turns an object whose values are action creators, into an object with the
 * same keys, but with every function wrapped into a `dispatch` call so they
 * may be invoked directly. This is just a convenience method, as you can call
 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
 *
 * For convenience, you can also pass an action creator as the first argument,
 * and get a dispatch wrapped function in return.
 *
 * @param {Function|Object} actionCreators An object whose values are action
 * creator functions. One handy way to obtain it is to use ES6 `import * as`
 * syntax. You may also pass a single function.
 *
 * @param {Function} dispatch The `dispatch` function available on your Redux
 * store.
 *
 * @returns {Function|Object} The object mimicking the original object, but with
 * every action creator wrapped into the `dispatch` call. If you passed a
 * function as `actionCreators`, the return value will also be a single
 * function.
 */

/**
 * Composes single-argument functions from right to left. The rightmost
 * function can take multiple arguments as it provides the signature for
 * the resulting composite function.
 *
 * @param {...Function} funcs The functions to compose.
 * @returns {Function} A function obtained by composing the argument functions
 * from right to left. For example, compose(f, g, h) is identical to doing
 * (...args) => f(g(h(...args))).
 */

/**
 * Creates a store enhancer that applies middleware to the dispatch method
 * of the Redux store. This is handy for a variety of tasks, such as expressing
 * asynchronous actions in a concise manner, or logging every action payload.
 *
 * See `redux-thunk` package as an example of the Redux middleware.
 *
 * Because middleware is potentially asynchronous, this should be the first
 * store enhancer in the composition chain.
 *
 * Note that each middleware will be given the `dispatch` and `getState` functions
 * as named arguments.
 *
 * @param {...Function} middlewares The middleware chain to be applied.
 * @returns {Function} A store enhancer applying the middleware.
 */

/*
 * This is a dummy function to check if the function name has been altered by minification.
 * If the function has been minified and NODE_ENV !== 'production', warn the user.
 */

// Fix native

// Set @@toStringTag to native iterators

// fix for some old engines

// fix Array#{values, @@iterator}.name in V8 / FF

// Define iterator

// Plug for library

// eslint-disable-next-line no-unused-vars

// true  -> String#at

// false -> String#codePointAt

// 20.2.2.16 Math.fround(x)

// 20.1.2.13 Number.parseInt(string, radix)

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js

// EXTERNAL MODULE: ./node_modules/leaflet/dist/leaflet-src.js

// CONCATENATED MODULE: ./node_modules/react-leaflet/es/Path.js

// Interactive Layer

// Layer

// CONCATENATED MODULE: ./node_modules/react-leaflet/es/utils/pick.js

// 19.1.3.6 Object.prototype.toString()

// win.eval() magically appears when this is called in IE:

// Avoid copying circular objects like `top` and `window` by only

// updating existing context properties or new properties in the `win`

// that was only introduced after the eval.

// maybe...

// 21.2.5.3 get RegExp.prototype.flags

// https://github.com/tc39/proposal-promise-finally

// https://tc39.github.io/ecma262/#sec-toindex

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */

/*eslint no-param-reassign:0*/

// Allow for axios('example/url'[, config]) a la fetch API

// Set config.method

// Hook up interceptors middleware

// Provide aliases for supported request methods

/*eslint func-names:0*/

// 0 -> Array#forEach

// 1 -> Array#map

// 2 -> Array#filter

// 3 -> Array#some

// 4 -> Array#every

// 5 -> Array#find

// 6 -> Array#findIndex

// map

// some

// find

// findIndex

// filter

// every

// 20.2.2.28 Math.sign(x)

// https://github.com/tc39/proposal-global

// 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])

// https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask

// 19.1.2.14 / 15.2.3.14 Object.keys(O)

// 19.1.2.5 Object.freeze(O)

/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */

// 23.3.3.3 WeakMap.prototype.get(key)

// 23.3.3.5 WeakMap.prototype.set(key, value)

// IE11 WeakMap frozen keys fix

// store frozen objects on internal weakmap shim

// store all the rest on native weakmap

// 7.2.2 IsArray(argument)

/* unused harmony export HELPER */

/* unused harmony export konst */

/* unused harmony export kFalse */

/* unused harmony export hasOwn */

/* unused harmony export arrayOfDeffered */

/* unused harmony export createMockTask */

/* unused harmony export autoInc */

/* unused harmony export cloneableGenerator */

/**
  Print error in a useful way whether in a browser environment
  (with expandable error stack traces), or in a node.js environment
  (text-only log output)
 **/

/*eslint-disable no-console*/

// B.2.3.12 String.prototype.strike()

// 21.1.3.13 String.prototype.repeat(count)

// 19.1.2.11 Object.isExtensible(O)

/* unused harmony export defaultMemoize */

/* unused harmony export createSelectorCreator */

// apply arguments instead of spreading for performance.

// apply arguments instead of spreading and mutate a local list of params for performance.

// we reference arguments instead of spreading them for performance reasons

// Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.

/* eslint class-methods-use-this: ["error", { "exceptMethods": ["__handleAfter"] }] */

// 18.2.5 parseInt(string, radix)

// eslint-disable-next-line no-prototype-builtins

// Node.js 0.9+ & IE10+ has setImmediate, otherwise:

// Node.js 0.8-

// $FlowFixMe

// record the module for SSR flushing :)

/* eslint-enable react/sort-comp */

/* eslint-disable react/sort-comp */

// display `loading` during componentWillReceiveProps

// $FlowIgnore

// Test for A's keys different from B.

// call something on iterator step with safe closing on error

// 7.4.6 IteratorClose(iterator, completion)

// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)

// 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)

/* , mapfn = undefined, thisArg = undefined */

// if object isn't iterable or it's array with default iterator - use simple case

/**
 * react-lazyload
 */

// if they are supported, setup the optional params

// IMPORTANT: FALSE doubles as the default CAPTURE value!

// element's top relative to intersection

// Be compatible with previous API

// If this element is hidden by css rules somehow, it's definitely invisible

// Avoid extra render if previously is visible

// Remove `once` component in listeners

// It's unlikely to change delay type on the fly, this is mainly

// designed for tests

/**
 * Check if `component` is visible in overflow container `parent`
 * @param  {node} component React component
 * @param  {node} parent    component's scroll parent
 * @return {bool}
 */

// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])

/* , newTarget */

// w/o altered newTarget, optimization for 0-4 arguments

// w/o altered newTarget, lot of arguments case

// with altered newTarget, not support built-in constructors

// https://github.com/sebmarkbage/ecmascript-string-left-right-trim

// fallback for not array-like ES3 strings and DOM objects

// getting tag from 19.1.3.6 Object.prototype.toString()

// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)

// Shouldn't skip holes

/* , that = undefined */

// #replace needs built-in support for named groups.

// #match works fine because it just return the exec results, even if it has

// a "grops" property.

// Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec

// String methods call symbol-named RegEp methods

// Symbol-named RegExp methods call .exec

// RegExp[@@split] doesn't call the regex's exec method, but first creates

// a new one. We need to return the patched regex when creating the new one.

// 21.2.5.6 RegExp.prototype[@@match](string)

// 21.2.5.9 RegExp.prototype[@@search](string)

// 19.2.3.6 Function.prototype[@@hasInstance](V)

// for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:

// 26.1.10 Reflect.isExtensible(target)

// B.2.3.14 String.prototype.sup()

// For browsers use XHR adapter

/* Ignore */

/**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */

// 20.2.2.12 Math.cosh(x)

// 19.1.2.7 Object.getOwnPropertyNames(O)

// @@split logic

// based on es5-shim implementation, need to rework it

// If `separator` is not a regex, use native split

// Avoid an infinite loop

// `String.prototype.split` method

// https://tc39.github.io/ecma262/#sec-string.prototype.split

// `RegExp.prototype[@@split]` method

// https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split

// NOTE: This cannot be properly polyfilled in engines that don't support

// the 'y' flag.

// https://tc39.github.io/proposal-setmap-offrom/

/* , mapFn, thisArg */

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])

// Thrash, waste and sodomy: IE GC bug

// eslint-disable-line no-script-url

// createDict = iframe.contentWindow.Object;

// html.removeChild(iframe);

// add "__proto__" for Object.getPrototypeOf polyfill

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703

// 21.1.3.7 String.prototype.includes(searchString, position = 0)

// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)

// 26.1.8 Reflect.getPrototypeOf(target)

// 20.2.2.14 Math.expm1(x)

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */

// CONCATENATED MODULE: ./node_modules/resolve-pathname/esm/resolve-pathname.js

// About 1.5x faster than the two-arg version of Array#splice()

// This implementation is based heavily on node's url.parse

// to is absolute

// to is relative, drop the filename

// CONCATENATED MODULE: ./node_modules/value-equal/esm/value-equal.js

// Test for strict equality first.

// Otherwise, if either of them == null they are not equal.

// EXTERNAL MODULE: ./node_modules/tiny-invariant/dist/tiny-invariant.esm.js

// Two-arg form: push(path, state)

// One-arg form: push(location)

// Resolve incomplete/relative pathname relative to current location.

// When there is no prior location and pathname is empty, set it to /

// TODO: If another transition starts while we're still confirming

// the previous one, we may end up in a weird state. Figure out the

// best way to handle this.

// Return false from a transition hook to cancel the transition.

// CONCATENATED MODULE: ./node_modules/history/esm/history.js

/* unused harmony export parsePath */

// eslint-disable-line no-alert

/**
 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
 *
 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
 * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586
 */

// IE 11 sometimes throws when accessing window.history.state

// See https://github.com/ReactTraining/history/pull/289

/**
 * Creates a history object that uses the HTML5 history API including
 * pushState, replaceState, and the popstate event.
 */

// Ignore extraneous popstate events in WebKit.

// TODO: We could probably make this more reliable by

// keeping a list of keys we've seen in sessionStorage.

// Instead, we just default to 0 for keys we don't know.

// Public interface

// We can't use window.location.hash here because it's not

// consistent across browsers - Firefox will pre-decode it!

// Ensure we always have a properly-encoded hash.

// A hashchange doesn't always == location change.

// Ignore this change; we already setState in push/replace.

// keeping a list of paths we've seen in sessionStorage.

// Instead, we just default to 0 for paths we don't know.

// Ensure the hash is encoded properly before doing anything else.

// We cannot tell if a hashchange was caused by a PUSH, so we'd

// rather setState here and ignore the hashchange. The caveat here

// is that other hash histories in the page will consider it a POP.

// We cannot tell if a hashchange was caused by a REPLACE, so we'd

/**
 * Creates a history object that stores locations in memory.
 */

// Mimic the behavior of DOM histories by

// causing a render after a cancelled POP.

// 20.1.2.1 Number.EPSILON

// eslint-disable-next-line no-useless-call

// check on default Array iterator

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */

// fast apply, http://jsperf.lnkit.com/fast-apply/5

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

/* eslint-disable no-unused-vars */

// Detect buggy property enumeration order in older V8 versions.

// https://bugs.chromium.org/p/v8/issues/detail?id=4118

// eslint-disable-line no-new-wrappers

// https://bugs.chromium.org/p/v8/issues/detail?id=3056

// We don't expect any of the above to throw, but better to be safe.

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// Used for setting prototype methods that IE8 chokes on.

// Constants describing the size of trie nodes.

// Boolean references, Rough equivalent of `bool &`.

// A function which returns a value representing an "owner" for transient writes

// to tries. The return value will only ever equal itself, and will not equal

// the return of any subsequent call of this function.

// This implements "is array index" which the ECMAString spec defines as:

//     A String property name P is an array index if and only if

//     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal

//     to 2^32−1.

// http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects

// N >>> 0 is shorthand for ToUint32

// Sanitize indices using this shorthand for ToInt32(argument)

// http://www.ecma-international.org/ecma-262/6.0/#sec-toint32

// Account for -0 which is negative, but not less than 0.

// Note: value is unchanged to not break immutable-devtools.

/*@__PURE__*/

// Only {length: 0} is considered Array-like.

// An object is only Array-like if it has a property where the last value

// in the array-like may be found (which could be undefined).

// abstract __iterateUncached(fn, reverse)

// abstract __iteratorUncached(type, reverse)

// #pragma Root Sequences

// # pragma Helper functions

/**
 * An extension of the "same-value" algorithm as [described for use by ES6 Map
 * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)
 *
 * NaN is considered the same as NaN, however -0 and 0 are considered the same
 * value, which is different from the algorithm described by
 * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).
 *
 * This is extended further to allow Objects to describe the values they
 * represent, by way of `valueOf` or `equals` (and `hashCode`).
 *
 * Note: because of this extension, the key equality of Immutable.Map and the
 * value equality of Immutable.Set will differ from ES6 Map and Set.
 *
 * ### Defining custom values
 *
 * The easiest way to describe the value an object represents is by implementing
 * `valueOf`. For example, `Date` represents a value by returning a unix
 * timestamp for `valueOf`:
 *
 *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...
 *     var date2 = new Date(1234567890000);
 *     date1.valueOf(); // 1234567890000
 *     assert( date1 !== date2 );
 *     assert( Immutable.is( date1, date2 ) );
 *
 * Note: overriding `valueOf` may have other implications if you use this object
 * where JavaScript expects a primitive, such as implicit string coercion.
 *
 * For more complex types, especially collections, implementing `valueOf` may
 * not be performant. An alternative is to implement `equals` and `hashCode`.
 *
 * `equals` takes another object, presumably of similar type, and returns true
 * if it is equal. Equality is symmetrical, so the same result should be
 * returned if this and the argument are flipped.
 *
 *     assert( a.equals(b) === b.equals(a) );
 *
 * `hashCode` returns a 32bit integer number representing the object which will
 * be used to determine how to store the value object in a Map or Set. You must
 * provide both or neither methods, one must not exist without the other.
 *
 * Also, an important relationship between these methods must be upheld: if two
 * values are equal, they *must* return the same hashCode. If the values are not
 * equal, they might have the same hashCode; this is called a hash collision,
 * and while undesirable for performance reasons, it is acceptable.
 *
 *     if (a.equals(b)) {
 *       assert( a.hashCode() === b.hashCode() );
 *     }
 *
 * All Immutable collections are Value Objects: they implement `equals()`
 * and `hashCode()`.
 */

// int

// Shift by 0 fixes the sign on the high part.

// v8 has an optimization for storing 31-bit signed numbers.

// Values which have either 00 or 11 as the high order bits qualify.

// This function drops the highest order bit in a signed number, maintaining

// the sign bit.

// The hash values for built-in constants are a 1 value for each 5-byte

// shift region expect for the first, which encodes the value. This

// reduces the odds of a hash collision for these common values.

// Compress arbitrarily large numbers into smi hashes.

// http://jsperf.com/hashing-strings

// IE has a `uniqueID` property on DOM nodes. We can construct the hash from it

// and avoid memory leaks from the IE cloneNode bug.

// Element

// Document

// If possible, use a WeakMap.

// Since we can't define a non-enumerable property on the object

// we'll hijack one of the less-used non-enumerable properties to

// save our hash on it. Since this is a function it will not show up in

// `JSON.stringify` which is what we want.

// At this point we couldn't get the IE `uniqueID` to use as a hash

// and we couldn't use a non-enumerable property to exploit the

// dontEnum bug so we simply add the `UID_HASH_KEY` on the node

// itself.

// Get references to ES5 object methods.

// This is the hash from JVM

// The hash code for a string is computed as

// s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],

// where s[i] is the ith character of the string and n is the length of

// the string. We "mod" the result to make it between 0 (inclusive) and 2^31

// (exclusive) by dropping high bits.

// True if Object.defineProperty works as expected. IE8 fails this test.

// Check if entry exists first so array access doesn't throw for holes

// in the parent iteration.

// super.reverse()

// begin or end will be NaN if they were provided as negative numbers and

// this collection's size is unknown. In that case, cache first so there is

// a known size and these do not resolve to NaN.

// Note: resolvedEnd is undefined when the original sequence's length is

// unknown and this slice did not supply an end and should contain all

// elements after resolvedBegin.

// In that case, resolvedSize will be NaN and sliceSize will remain undefined.

// If collection.size is undefined, the size of the realized sliceSeq is

// unknown at this point unless the number of items to slice is 0

// Don't bother instantiating parent iterator if taking 0.

// b is considered the new max if the comparator declares them equal, but

// they are not equal and b is in fact a nullish value.

// Note: this a generic base implementation of __iterate in terms of

// __iterator which may be more generically useful in the future.

/* generic:
    var iterator = this.__iterator(ITERATE_ENTRIES, reverse);
    var step;
    var iterations = 0;
    while (!(step = iterator.next()).done) {
      iterations++;
      if (fn(step.value[1], step.value[0], this) === false) {
        break;
      }
    }
    return iterations;
    */

// indexed:

// #pragma Helper Functions

// http://jsperf.com/copy-array-inline

/**
 * Returns true if the value is a potentially-persistent data structure, either
 * provided by Immutable.js or a plain Array or Object.
 */

/**
 * Converts a value to a string, adding quotes if a string was provided.
 */

// Copy on write

// @pragma Access

// @pragma Modification

// @pragma Composition

// Late binding

// @pragma Mutability

// #pragma Trie Nodes

// #pragma Iterators

// @pragma Iteration

// TODO: seems like these methods are very similar

// Sanitize begin & end using this shorthand for ToInt32(argument)

// If it's going to end after it starts, it's empty.

// New size might need creating a higher root.

// Locate or create the new tail.

// Merge Tail into tree.

// If the size has been reduced, there's a chance the tail needs to be trimmed.

// If the new origin is within the tail, then we do not need a root.

// Identify the new top root node of the subtree of the old root.

// Trim the new sides of the new root.

// removed

/* reverse */

// super.slice(begin, end);

/**
 * Contributes additional methods to a constructor
 */

/**
 * Returns a lazy seq of nums from start (inclusive) to end
 * (exclusive), by step, where start defaults to 0, step to 1, and end to
 * infinity. When start is equal to end, returns empty list.
 */

// Note: all of these methods are deprecated.

// ### Conversion to other types

// Keyed collections produce an array of tuples.

// Use Late Binding here to solve the circular dependency.

// ### Common JavaScript methods and properties

// ### ES6 Collection methods (ES6 Array and Map)

// ### More sequential methods

// We cache as an entries array, so we can just return the cache!

// ### Hashable Object

// ### Internal

// abstract __iterate(fn, reverse)

// abstract __iterator(type, reverse)

/*, ...values*/

// If index is negative, it should resolve relative to the size of the

// collection. However size may be expensive to compute if not cached, so

// only call count() if the number is in fact negative.

// ### More collection methods

/*, ...collections */

// #pragma Helper functions

// Mixin subclasses

// Deprecated: left to attempt not to break any external code which

// relies on a ._name property existing on record instances.

// Use Record.getDescriptiveName() instead

/* eslint-disable no-console */

// Object.defineProperty failed. Probably IE8.

/**
 * Returns a lazy Seq of `value` repeated `times` times. When `times` is
 * undefined, returns an infinite sequence of `value`.
 */

// Note: Iterable is deprecated

// 20.2.2.11 Math.clz32(x)

// https://github.com/zenparsing/es-observable

// https://github.com/mathiasbynens/String.prototype.at

// Subscribe to store changes to check if we are in time travelling

// Extract store's location

// Extract history's location

// If we do time travelling, the location in store is changed but location in history is not changed

// Update history's location to match store's location

// Dispatch onLocationChanged except when we're in time travelling

// Listen to history changes

// Dispatch a location change action for the initial location.

// This makes it backward-compatible with react-router-redux.

// But, we add `isFirstRendering` to `true` to prevent double-rendering.

/*
   * ConnectedRouter listens to a history object passed from props.
   * When history is changed, it dispatches action to redux store.
   * Then, store will pass props to component to render.
   * This creates uni-directional flow from history->store->router->components.
   */

// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)

/* , start = 0, end = @length */

// 22.1.3.13 Array.prototype.join(separator)

// fallback for not array-like strings

// 21.2.5.3 get RegExp.prototype.flags()

// @@search logic

// `String.prototype.search` method

// https://tc39.github.io/ecma262/#sec-string.prototype.search

// `RegExp.prototype[@@search]` method

// https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search

/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */

// Standard

// Microsoft

// Mozilla

// Axios

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)

/**
  * Parse a URL to discover it's components
  *
  * @param {String} url The URL to be parsed
  * @returns {Object}
  */

// urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils

// IE needs attribute set twice to normalize properties

// Standard browser envs have full support of the APIs needed to test

// whether the request URL is of the same origin as current location.

// RegExp constructor can alter flags and IsRegExp works correct with @@match

// https://tc39.github.io/proposal-setmap-offrom/#sec-map.from

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()

// https://github.com/ljharb/proposal-is-error

// ie9- setTimeout & setInterval additional parameters fix

// B.2.2.2 Object.prototype.__defineGetter__(P, getter)

// 19.1.2.14 Object.keys(O)

// 7.1.4 ToInteger

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */

// 7.1.13 ToObject(argument)

/**
 * This middleware captures CALL_HISTORY_METHOD actions to redirect to the
 * provided history object. This will prevent these actions from reaching your
 * reducer or any middleware that comes after this one.
 */

// B.2.3.5 String.prototype.bold()

// 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])

// @@match logic

// `String.prototype.match` method

// https://tc39.github.io/ecma262/#sec-string.prototype.match

// `RegExp.prototype[@@match]` method

// https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match

// fast case for arrays with default iterator

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */

// eslint-disable-next-line no-param-reassign

// 23.2 Set Objects

// 23.2.3.1 Set.prototype.add(value)

// Component.peek comes from react-side-effect:

// For testing, you may use a static peek() method available on the returned component.

// It lets you get the current state without resetting the mounted instance stack.

// Don’t use it for anything other than testing.

/**
       * @param {Object} base: {"target": "_blank", "href": "http://mysite.com/"}
       * @param {Object} bodyAttributes: {"className": "root"}
       * @param {String} defaultTitle: "Default Title"
       * @param {Boolean} defer: true
       * @param {Boolean} encodeSpecialCharacters: true
       * @param {Object} htmlAttributes: {"lang": "en", "amp": undefined}
       * @param {Array} link: [{"rel": "canonical", "href": "http://mysite.com/example"}]
       * @param {Array} meta: [{"name": "description", "content": "Test description"}]
       * @param {Array} noscript: [{"innerHTML": "<img src='http://mysite.com/js/test.js'"}]
       * @param {Function} onChangeClientState: "(newState) => console.log(newState)"
       * @param {Array} script: [{"type": "text/javascript", "src": "http://mysite.com/js/test.js"}]
       * @param {Array} style: [{"type": "text/css", "cssText": "div { display: block; color: blue; }"}]
       * @param {String} title: "Title"
       * @param {Object} titleAttributes: {"itemprop": "name"}
       * @param {String} titleTemplate: "MySite.com - %s"
       */

/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/

/* global define */

// CONCATENATED MODULE: ./node_modules/react-router/esm/react-router.js

// TODO: Replace with React.createContext once we can assume React 16+

// This is a bit of a hack. We have to start listening for location

// changes here in the constructor in case there are any <Redirect>s

// on the initial render. If there are, they will replace/push when

// they mount and since cDM fires in children before parents, we may

// get a new location before the <Router> is mounted.

/**
 * The public API for a <Router> that stores location in memory.
 */

/**
 * The public API for prompting the user before navigating away from a screen.
 */

/**
 * Public API for generating a URL pathname from a path and parameters.
 */

/**
 * The public API for navigating programmatically with a component.
 */

// When rendering in a static context,

// set the new location immediately.

/**
 * Public API for matching a URL pathname to a path.
 */

// the path used to match

// the matched portion of the URL

// whether or not we matched exactly

/**
 * The public API for matching a single path and rendering.
 */

// Preact uses an empty array as children by

// default, so use null if that's the case.

/**
 * The public top-level API for a "static" <Router>, so-called because it
 * can't actually change the current location. Instead, it just records
 * location changes in a context object. Useful mainly in testing and
 * server-rendering scenarios.
 */

/**
 * The public API for rendering the first <Route> that matches.
 */

// We use React.Children.forEach instead of React.Children.toArray().find()

// here because toArray adds keys to all child elements and we do not want

// to trigger an unmount/remount for two <Route>s that render the same

// component at different URLs.

/**
 * A public higher-order component to access the imperative API
 */

// 21.1.3.25 String.prototype.trim()

// 20.2.2.5 Math.asinh(x)

// Tor Browser bug: Math.asinh(0) -> -0

// Fix browsers whose `exec` methods don't consistently return `undefined`

// for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/

// eslint-disable-next-line no-loop-func

/**
 * Throws a `Cancel` if cancellation has been requested.
 */

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */

// Ensure headers exist

// Transform request data

// Flatten headers

// Transform response data

// 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])

/* , fromIndex = 0 */

// 19.1.2.13 Object.isSealed(O)

// IE7-

// may throw

// variable length - can't use forEach

// unwrap

// wrap

// correct subclassing with @@species support

// unhandled rejections tracking support, NodeJS Promise without it fails @@species test

// Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should

// constructor polyfill

// 25.4.3.1 Promise(executor)

// <- awaiting reactions

// <- checked in isUnhandled reactions

// <- state

// <- done

// <- value

// <- rejection state, 0 - default, 1 - handled, 2 - unhandled

// 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)

// 25.4.5.1 Promise.prototype.catch(onRejected)

// statics

// 25.4.4.5 Promise.reject(r)

// 25.4.4.6 Promise.resolve(x)

// 25.4.4.1 Promise.all(iterable)

// 25.4.4.4 Promise.race(iterable)

/**
 * Adds query to location.
 * Utilises the search prop of location to construct query.
 */

// Ignore the `?` part of the search string e.g. ?username=codejockie

// Split on `=`, to get key and value

// Split the query string on `&` e.g. ?username=codejockie&name=Kennedy

/*
    * This reducer will update the state with the most recent location history
    * has transitioned to.
    */

// Don't update the state ref for the first rendering

// to prevent the double-rendering issue on initilization

// IE8-

// V8 bug

// Old WebKit

// 22.1.3.25 Array.prototype.sort(comparefn)

/* unused harmony export useLeaflet */

/* unused harmony export LeafletConsumer */

// flowlint-next-line sketchy-null-string:off

// length should be 1, old FF problem

// 21.1.2.2 String.fromCodePoint(...codePoints)

// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)

// contains in native

// export native or passed

// bind timers to global for call from export context

// extend global

// export

// type bitmap

// forced

// global

// static

// proto

// bind

// safe

// real proto method for `library`

// eslint-disable-next-line no-throw-literal

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.from

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.from

// 20.1.2.12 Number.parseFloat(string)

// 21.1.3.27 String.prototype[@@iterator]()

// target

// most Object methods by ES6 should accept primitives

// `RegExpExec` abstract operation

// https://tc39.github.io/ecma262/#sec-regexpexec

// 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])

// fallback for non-array-like ES3 and non-enumerable old V8 strings

// https://github.com/tc39/Array.prototype.includes

// object ID

// return primitive with prefix

// can't set metadata to uncaught frozen object

// not necessary to add metadata

// add missing metadata

// collection type

// collection id

// leak store for uncaught frozen objects

// 23.3.3.2 WeakMap.prototype.delete(key)

// 23.4.3.3 WeakSet.prototype.delete(value)

// 23.3.3.4 WeakMap.prototype.has(key)

// 23.4.3.4 WeakSet.prototype.has(value)

// B.2.2.5 Object.prototype.__lookupSetter__(P)

// 19.1.2.12 Object.isFrozen(O)

// B.2.3.13 String.prototype.sub()

// 21.2.5.14 RegExp.prototype.toString()

// to indexed object, toObject with fallback for non-array-like ES3 strings

// do not edit .js files directly - edit src/index.jst

// true if both NaN, false otherwise

// 7.1.1 ToPrimitive(input [, PreferredType])

// instead of the ES6 spec version, we didn't implement @@toPrimitive case

// and the second argument - flag - preferred type is a string

// 20.2.2.30 Math.sinh(x)

// V8 near Chromium 38 has a problem with very small numbers

/* global window */

// B.2.3.7 String.prototype.fontcolor(color)

// 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])

// end fast-deep-equal

// fast-deep-equal index.js 2.0.1

// start react-fast-compare

// custom handling for DOM elements

// custom handling for React

// end react-fast-compare

// warn on circular references, don't crash

// browsers give this different errors name and messages:

// chrome/safari: "RangeError", "Maximum call stack size exceeded"

// firefox: "InternalError", too much recursion"

// edge: "Error", "Out of stack space"

// some other error. we should definitely know about these

// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatten

// https://tc39.github.io/proposal-setmap-offrom/#sec-map.of

// Create an object with no prototype

// https://github.com/sindresorhus/query-string/issues/47

// missing `=` should be `null`:

// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters

// Firefox (pre 40) decodes `%3D` to `=`

// https://github.com/sindresorhus/query-string/pull/37

// Sort object keys, not values

// 19.1.2.1 Object.assign(target, source, ...)

// should work with symbols and should have deterministic property order (V8 bug)

// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)

// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)

// 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.of

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028

// eslint-disable-line no-undef

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window

// 20.2.2.21 Math.log10(x)

// 21.1.2.4 String.raw(callSite, ...substitutions)

// 20.3.3.1 / 15.9.4.4 Date.now()

/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */

// 26.1.5 Reflect.enumerate(target)

// next index

// keys

// 19.2.4.2 name

// 20.1.2.3 Number.isInteger(number)

// @flow

// 20.2.2.3 Math.acosh(x)

// 7.2.9 SameValue(x, y)

/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */

// Node.js

// Promise.resolve without an argument throws an error in LG WebOS 2

// strange IE + webpack dev server bug - use .call(global)

// 20.1.2.6 Number.MAX_SAFE_INTEGER

// B.2.3.2 String.prototype.anchor(name)

// 20.2.2.34 Math.trunc(x)

// Works with __proto__ only. Old v8 can't work with null proto objects.

/* eslint-disable no-proto */

// eslint-disable-line

// DCE check should happen before ReactDOM bundle executes so that

// DevTools can report bad minification during injection.

/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */

// Verify that the code above has been dead code eliminated (DCE'd).

// DevTools shouldn't crash React, no matter what.

// We should still report in case we break this code.

// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false

// ECMAScript 6 symbols shim

// 19.4.1.1 Symbol([description])

// 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14

// 19.4.2.1 Symbol.for(key)

// 19.4.2.5 Symbol.keyFor(sym)

// 19.1.2.2 Object.create(O [, Properties])

// 19.1.2.4 Object.defineProperty(O, P, Attributes)

// 19.1.2.3 Object.defineProperties(O, Properties)

// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)

// 19.1.2.8 Object.getOwnPropertySymbols(O)

// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives

// https://bugs.chromium.org/p/v8/issues/detail?id=3443

// 24.3.2 JSON.stringify(value [, replacer [, space]])

// MS Edge converts symbol values to JSON as {}

// WebKit converts symbol values to JSON as null

// V8 throws on boxed symbols

// IE8 returns string on undefined

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)

// 19.4.3.5 Symbol.prototype[@@toStringTag]

// 20.2.1.9 Math[@@toStringTag]

// 24.3.3 JSON[@@toStringTag]

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */

// https://github.com/tc39/proposal-object-getownpropertydescriptors

// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()

// PhantomJS / old WebKit has a broken implementations

// eslint-disable-next-line no-undefined

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)

// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])

// 26.1.14 Reflect.setPrototypeOf(target, proto)

// 20.1.2.10 Number.MIN_SAFE_INTEGER

/* eslint-disable */

/*require.resolve*/

// optional / simple context binding

// 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])

/* , fromIndex = @[*-1] */

// convert -0 to +0

// https://tc39.github.io/String.prototype.matchAll/

// all object keys, includes non-enumerable and symbols

// eslint-disable-next-line space-infix-ops

/* unused harmony export BUFFER_OVERFLOW */

// https://tc39.github.io/proposal-setmap-offrom/#sec-set.of

// 19.1.2.15 Object.preventExtensions(O)

// 22.1.3.31 Array.prototype[@@unscopables]

// B.2.3.3 String.prototype.big()

// 7.1.15 ToLength

// pow(2, 53) - 1 == 9007199254740991

// Thank's IE8 for his funny defineProperty

// B.2.3.8 String.prototype.fontsize(size)

/* global Symbol */

/**
   * An extension of the "same-value" algorithm as [described for use by ES6 Map
   * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)
   *
   * NaN is considered the same as NaN, however -0 and 0 are considered the same
   * value, which is different from the algorithm described by
   * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).
   *
   * This is extended further to allow Objects to describe the values they
   * represent, by way of `valueOf` or `equals` (and `hashCode`).
   *
   * Note: because of this extension, the key equality of Immutable.Map and the
   * value equality of Immutable.Set will differ from ES6 Map and Set.
   *
   * ### Defining custom values
   *
   * The easiest way to describe the value an object represents is by implementing
   * `valueOf`. For example, `Date` represents a value by returning a unix
   * timestamp for `valueOf`:
   *
   *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...
   *     var date2 = new Date(1234567890000);
   *     date1.valueOf(); // 1234567890000
   *     assert( date1 !== date2 );
   *     assert( Immutable.is( date1, date2 ) );
   *
   * Note: overriding `valueOf` may have other implications if you use this object
   * where JavaScript expects a primitive, such as implicit string coercion.
   *
   * For more complex types, especially collections, implementing `valueOf` may
   * not be performant. An alternative is to implement `equals` and `hashCode`.
   *
   * `equals` takes another object, presumably of similar type, and returns true
   * if the it is equal. Equality is symmetrical, so the same result should be
   * returned if this and the argument are flipped.
   *
   *     assert( a.equals(b) === b.equals(a) );
   *
   * `hashCode` returns a 32bit integer number representing the object which will
   * be used to determine how to store the value object in a Map or Set. You must
   * provide both or neither methods, one must not exist without the other.
   *
   * Also, an important relationship between these methods must be upheld: if two
   * values are equal, they *must* return the same hashCode. If the values are not
   * equal, they might have the same hashCode; this is called a hash collision,
   * and while undesirable for performance reasons, it is acceptable.
   *
   *     if (a.equals(b)) {
   *       assert( a.hashCode() === b.hashCode() );
   *     }
   *
   * All Immutable collections implement `equals` and `hashCode`.
   *
   */

// @pragma Construction

// undefined

// New origin might need creating a higher root.

// Otherwise, if the root has been trimmed, garbage collect.

// this iterable's size is unknown. In that case, cache first so there is

// If iterable.size is undefined, the size of the realized sliceSeq is

/* generic:
      var iterator = this.__iterator(ITERATE_ENTRIES, reverse);
      var step;
      var iterations = 0;
      while (!(step = iterator.next()).done) {
        iterations++;
        if (fn(step.value[1], step.value[0], this) === false) {
          break;
        }
      }
      return iterations;
      */

// Array might not be iterable in this environment, so we need a fallback

// to our wrapped type.

/**
   * Contributes additional methods to a constructor
   */

// Note: in an ES6 environment, we would prefer:

// for (var key of searchKeyPath) {

// var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';

// var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';

// var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';

// var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';

/*, ...iterables */

// 21.1.3.3 String.prototype.codePointAt(pos)

/* unused harmony export EVENTS_RE */

// 26.1.12 Reflect.preventExtensions(target)

/* harmony reexport (safe) */

// @@replace logic

// `String.prototype.replace` method

// https://tc39.github.io/ecma262/#sec-string.prototype.replace

// `RegExp.prototype[@@replace]` method

// https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace

// NOTE: This is equivalent to

//   captures = result.slice(1).map(maybeToString)

// but for some reason `nativeSlice.call(result, 1, result.length)` (called in

// the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and

// causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.

// https://tc39.github.io/ecma262/#sec-getsubstitution

// \d\d?

// 25.4.1.5 NewPromiseCapability(C)

// 20.2.2.22 Math.log2(x)

// CONCATENATED MODULE: ./node_modules/redux-saga/es/internal/sagaHelpers/fsmIterator.js

// EXTERNAL MODULE: ./node_modules/redux-saga/es/internal/io.js

// CONCATENATED MODULE: ./node_modules/redux-saga/es/internal/sagaHelpers/takeEvery.js

// CONCATENATED MODULE: ./node_modules/redux-saga/es/internal/sagaHelpers/takeLatest.js

// EXTERNAL MODULE: ./node_modules/redux-saga/es/internal/buffers.js

// CONCATENATED MODULE: ./node_modules/redux-saga/es/internal/sagaHelpers/throttle.js

// CONCATENATED MODULE: ./node_modules/redux-saga/es/internal/sagaHelpers/index.js

/* unused harmony export takeEvery */

/* unused harmony export takeLatest */

/* unused harmony export throttle */

/* concated harmony reexport takeEveryHelper */

/* concated harmony reexport takeLatestHelper */

/* concated harmony reexport throttleHelper */

/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// https://github.com/tc39/proposal-promise-try

// $FlowFixMe: Object spread

// 7.2.8 IsRegExp(argument)

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js

// CONCATENATED MODULE: ./node_modules/react-leaflet/es/MapLayer.js

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js

// CONCATENATED MODULE: ./node_modules/react-leaflet/es/Map.js

// CONCATENATED MODULE: ./node_modules/react-leaflet/es/utils/omit.js

// The canvas renderer uses requestAnimationFrame, making a deferred call to a deleted object

// When preferCanvas is set, use simpler teardown logic

// TODO: Not spec compliant, should be false.

// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])

/* , endPosition = @length */

// 20.1.2.5 Number.isSafeInteger(number)

// HTTP basic authentication

// Add responseType to request if needed

// Set the request timeout in MS

// Listen for ready state

// The request errored out and we didn't get a response, this will be

// handled by onerror instead

// With one exception: request that using file: protocol, most browsers

// will return status as 0 even though it's a successful request

// Clean up request

// Handle browser request cancellation (as opposed to a manual cancellation)

// Handle low level network errors

// Real errors are hidden from us by the browser

// onerror should only fire if it's a network error

// Handle timeout

// Add xsrf header

// This is only done if running in a standard browser environment.

// Specifically not if we're in a web worker, or react-native.

// Add headers to the request

// Remove Content-Type if data is undefined

// Otherwise add header to the request

// Add withCredentials to request if needed

// Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.

// But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.

// Handle progress if needed

// Not all browsers support upload events

// Handle cancellation

// Send the request

// B.2.3.10 String.prototype.link(url)

/**
 * @fileOverview Find scroll parent
 */

/* unused harmony export takem */

/* unused harmony export race */

/* unused harmony export apply */

/* unused harmony export cps */

/* unused harmony export spawn */

/* unused harmony export join */

/* unused harmony export select */

/* unused harmony export cancelled */

/* unused harmony export flush */

/* unused harmony export getContext */

/* unused harmony export setContext */

/**
  channel(pattern, [buffer])    => creates an event channel for store actions
**/

// 18.2.4 parseFloat(string)

// hold on to it

// B.2.2.4 Object.prototype.__lookupGetter__(P)

/**
  Variable to hold a counting semaphore
  - Incrementing adds a lock and puts the scheduler in a `suspended` state (if it's not
    already suspended)
  - Decrementing releases a lock. Zero locks puts the scheduler in a `released` state. This
    triggers flushing the queued tasks.
**/

/**
  Executes or queues a task depending on the state of the scheduler (`suspended` or `released`)
**/

/**
  Puts the scheduler in a `suspended` state. Scheduled tasks will be queued until the
  scheduler is released.
**/

/**
  Puts the scheduler in a `released` state.
**/

/**
  Releases the current lock. Executes all queued tasks if the scheduler is in the released state.
**/

/**
  Executes a task 'atomically'. Tasks scheduled during this execution will be queued
  and flushed after this task has finished (assuming the scheduler endup in a released
  state).
**/

// 26.1.4 Reflect.deleteProperty(target, propertyKey)

/* = 0 */

/* = 0, end = @length */

// Calculate list of tags, giving priority innermost component (end of the propslist)

// Special rule with link tags, since rel and href are both primary tags, rel takes priority

// Special case for innerHTML which doesn't work lowercased

// Update seen tags with tags from this instance

// Remove a duplicate tag from domTagstoRemove, so it isn't cleared.

// use function arg to avoid need to escape $ characters

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.of

// 7.2.1 RequireObjectCoercible(argument)

/** @license React v16.13.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// Headers whose duplicates are ignored by node

// c.f. https://nodejs.org/api/http.html#http_message_headers

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */

// false -> Array#indexOf

// true  -> Array#includes

// Array#includes uses SameValueZero equality algorithm

// Array#indexOf ignores holes, Array#includes - not

// 23.4 WeakSet Objects

// 23.4.3.1 WeakSet.prototype.add(value)

// fast case

// frozen object case

// index

// first entry

// last entry

// size

// 23.1.3.1 Map.prototype.clear()

// 23.2.3.2 Set.prototype.clear()

// 23.1.3.3 Map.prototype.delete(key)

// 23.2.3.4 Set.prototype.delete(value)

// 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)

// 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)

// revert to the last existing entry

// 23.1.3.7 Map.prototype.has(key)

// 23.2.3.7 Set.prototype.has(value)

// change existing entry

// <- index

// <- key

// <- previous entry

// <- next entry

// add to index

// add .keys, .values, .entries, [@@iterator]

// 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11

// kind

// get next entry

// return step by kind

// or finish the iteration

// add [@@species], 23.1.2.2, 23.2.2.2

// 20.2.2.33 Math.tanh(x)

// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */

// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray

/*global toString:true*/

// utils is a library of generic helper functions non-specific to axios

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */

/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */

// Don't bother if no value provided

// Force an array if not already something iterable

// Iterate over array values

// Iterate over object keys

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */

/**
 * Function equal to merge with the difference being that no reference
 * to original objects is kept.
 *
 * @see merge
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */

// Forced replacement prototype accessors methods

// In FF throws only define methods

// eslint-disable-next-line no-undef, no-useless-call

// Number('+0x1') should be NaN, old V8 fix

// fast equal /^0b[01]+$/i

// fast equal /^0o[0-7]+$/i

// parseInt parses a string to a first unavailable symbol

// but ToNumber should return NaN if a string contains unavailable symbols

// ES3:

// 24.1.3.1 ArrayBuffer.isView(arg)

// 24.1.4.3 ArrayBuffer.prototype.slice(start, end)

// FF fix

// 26.1.11 Reflect.ownKeys(target)

// This works in non-strict mode

// This works if eval is allowed (see CSP)

// This works if the window reference is available

// g can still be undefined, but nothing to do about it...

// We return undefined, instead of nothing here, so it's

// easier to handle this case. if(!global) { ...}

/** @license React v16.13.1
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/*
 Modernizr 3.0.0pre (Custom Build) | MIT
*/

// 22.1.3.4 Array.prototype.entries()

// 22.1.3.13 Array.prototype.keys()

// 22.1.3.29 Array.prototype.values()

// 22.1.3.30 Array.prototype[@@iterator]()

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)

// 19.1.2.17 Object.seal(O)

// 9.4.2.3 ArraySpeciesCreate(originalArray, length)

// Don't enum bug & hidden keys

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */

// Copy axios.prototype to instance

// Copy context to instance

// Create the default instance to be exported

// Expose Axios class to allow class inheritance

// Factory for creating new instances

// Expose Cancel & CancelToken

// Expose all/spread

// Allow use of default import syntax in TypeScript
